
(0a4cd0ff4f4adf7b282c22c814731893850751c68test/models/repository/contribution_graph_status_test.rbRuby"02ç%RepositoryContributionGraphStatusTest>class RepositoryContributionGraphStatusTest < GitHub::TestCase"
,*
+2<a8@2pTestCase>class RepositoryContributionGraphStatusTest < GitHub::TestCase"
/?*
.>2dt8@2nGitHub>class RepositoryContributionGraphStatusTest < GitHub::TestCase"
/5*
.42dj8@2Fincludeinclude MetricsHelper"

*
	2w~8@2MMetricsHelperinclude MetricsHelper"
*

2å8@2?fixturesfixtures do"
*

2èó8@2kcreate9@status = create(:contribution_graph_status, :git_backed)"
*
2©Ø8@2wcreateE@contributor_status = create(:contribution_graph_status, :git_backed,"
		!*
 2Û˘8@2Wutc(last_viewed_at: Time.utc(2012, 1, 1, 13)"
*


2Úı8@2XTime(last_viewed_at: Time.utc(2012, 1, 1, 13)"
*


2ÌÒ8@2Pto_i Time.utc(2011, 2, 4).to_i => 90,"
 $*
#2ïô8@2Outc Time.utc(2011, 2, 4).to_i => 90,"
*
2Öà8@2PTime Time.utc(2011, 2, 4).to_i => 90,"
*

2ÄÑ8@2Pto_i Time.utc(2011, 2, 27).to_i => 7,"
!%*
 $2¡≈8@2Outc Time.utc(2011, 2, 27).to_i => 7,"
*
2∞≥8@2PTime Time.utc(2011, 2, 27).to_i => 7,"
*

2´Ø8@2Oto_iTime.utc(2011, 3, 1).to_i => 1,"
 $*
#2ÎÔ8@2NutcTime.utc(2011, 3, 1).to_i => 1,"
*
2€ﬁ8@2OTimeTime.utc(2011, 3, 1).to_i => 1,"
*

2÷⁄8@2Rto_i"Time.utc(2010, 11, 12).to_i => 38,"
"&*
!%2¬∆8@2Qutc"Time.utc(2010, 11, 12).to_i => 38,"
*
2∞≥8@2RTime"Time.utc(2010, 11, 12).to_i => 38,"
*

2´Ø8@2Pto_i Time.utc(2011, 3, 20).to_i => 0,"
!%*
 $2ÓÚ8@2Outc Time.utc(2011, 3, 20).to_i => 0,"
*
2›‡8@2PTime Time.utc(2011, 3, 20).to_i => 0,"
*

2ÿ‹8@2Pto_i Time.utc(2011, 3, 20).to_i => 1,"
!%*
 $2¡≈8@2Outc Time.utc(2011, 3, 20).to_i => 1,"
*
2∞≥8@2PTime Time.utc(2011, 3, 20).to_i => 1,"
*

2´Ø8@2Pto_i Time.utc(2011, 4, 25).to_i => 1,"
!%*
 $2Ï8@2Outc Time.utc(2011, 4, 25).to_i => 1,"
*
2€ﬁ8@2PTime Time.utc(2011, 4, 25).to_i => 1,"
*

2÷⁄8@2Oto_iTime.utc(2011, 2, 4).to_i => 0,"
   $*
#2ÓÚ8@2NutcTime.utc(2011, 2, 4).to_i => 0,"
  *
2ﬁ·8@2OTimeTime.utc(2011, 2, 4).to_i => 0,"
  *

2Ÿ›8@2Pto_i Time.utc(2011, 2, 27).to_i => 1,"
!!!%*
   $2ôù8@2Outc Time.utc(2011, 2, 27).to_i => 1,"
!!*
  2àã8@2PTime Time.utc(2011, 2, 27).to_i => 1,"
!!*
 
 2Éá8@2Oto_iTime.utc(2011, 3, 1).to_i => 2,"
" "$*
!!#2√«8@2NutcTime.utc(2011, 3, 1).to_i => 2,"
""*
!!2≥∂8@2OTimeTime.utc(2011, 3, 1).to_i => 2,"
""*
!
!2Æ≤8@2Qto_i!Time.utc(2010, 11, 12).to_i => 0,"
%"%&*
$!$%2ö	û	8@2Putc!Time.utc(2010, 11, 12).to_i => 0,"
%%*
$$2à	ã	8@2QTime!Time.utc(2010, 11, 12).to_i => 0,"
%%*
$
$2É	á	8@2Pto_i Time.utc(2011, 3, 20).to_i => 7,"
&!&%*
% %$2≈	…	8@2Outc Time.utc(2011, 3, 20).to_i => 7,"
&&*
%%2¥	∑	8@2PTime Time.utc(2011, 3, 20).to_i => 7,"
&&*
%
%2Ø	≥	8@2Pto_i Time.utc(2011, 3, 20).to_i => 1,"
)!)%*
( ($2ò
ú
8@2Outc Time.utc(2011, 3, 20).to_i => 1,"
))*
((2á
ä
8@2PTime Time.utc(2011, 3, 20).to_i => 1,"
))*
(
(2Ç
Ü
8@2Pto_i Time.utc(2012, 4, 25).to_i => 0,"
*!*%*
) )$2√
«
8@2Outc Time.utc(2012, 4, 25).to_i => 0,"
***
))2≤
µ
8@2PTime Time.utc(2012, 4, 25).to_i => 0,"
***
)
)2≠
±
8@2Oto_iTime.utc(2011, 2, 4).to_i => 1,"
/ /$*
..#2√«8@2NutcTime.utc(2011, 2, 4).to_i => 1,"
//*
..2≥∂8@2OTimeTime.utc(2011, 2, 4).to_i => 1,"
//*
.
.2Æ≤8@2Pto_i Time.utc(2011, 2, 27).to_i => 1,"
0!0%*
/ /$2ÓÚ8@2Outc Time.utc(2011, 2, 27).to_i => 1,"
00*
//2›‡8@2PTime Time.utc(2011, 2, 27).to_i => 1,"
00*
/
/2ÿ‹8@2Oto_iTime.utc(2011, 3, 1).to_i => 1,"
1 1$*
00#2òú8@2NutcTime.utc(2011, 3, 1).to_i => 1,"
11*
002àã8@2OTimeTime.utc(2011, 3, 1).to_i => 1,"
11*
0
02Éá8@2Qto_i!Time.utc(2010, 11, 12).to_i => 1,"
4"4&*
3!3%2ÔÛ8@2Putc!Time.utc(2010, 11, 12).to_i => 1,"
44*
332›‡8@2QTime!Time.utc(2010, 11, 12).to_i => 1,"
44*
3
32ÿ‹8@2Pto_i Time.utc(2011, 3, 20).to_i => 1,"
5!5%*
4 4$2öû8@2Outc Time.utc(2011, 3, 20).to_i => 1,"
55*
442âå8@2PTime Time.utc(2011, 3, 20).to_i => 1,"
55*
4
42Ñà8@2Pto_i Time.utc(2011, 3, 20).to_i => 1,"
8!8%*
7 7$2ÌÒ8@2Outc Time.utc(2011, 3, 20).to_i => 1,"
88*
772‹ﬂ8@2PTime Time.utc(2011, 3, 20).to_i => 1,"
88*
7
72◊€8@2Pto_i Time.utc(2012, 4, 25).to_i => 1,"
9!9%*
8 8$2òú8@2Outc Time.utc(2012, 4, 25).to_i => 1,"
99*
882áä8@2PTime Time.utc(2012, 4, 25).to_i => 1,"
99*
8
82ÇÜ8@2ƒ!assert_fresh_data_overrides_stalewdef assert_fresh_data_overrides_stale(graph_name, stale_data, fresh_data, parsed_stale: [], now: Time.utc(2011, 2, 15))"
??(*
>>'2 Î8@2¶utcwdef assert_fresh_data_overrides_stale(graph_name, stale_data, fresh_data, parsed_stale: [], now: Time.utc(2011, 2, 15))"
?i?l*
>h>k2¨Ø8@2ßTimewdef assert_fresh_data_overrides_stale(graph_name, stale_data, fresh_data, parsed_stale: [], now: Time.utc(2011, 2, 15))"
?d?h*
>c>g2ß´8@2Swith_cache_enabledwith_cache_enabled do"
@@*
??2¬‘8@2HfreezeTimecop.freeze(now) do"
AA*
@@2ÊÏ8@2Oupdate!@contributor_status.update!("
BB$*
AA#2ëò8@2tdefault_oid=last_indexed_oid: @contributor_status.repository.default_oid,"
C<CG*
B;BF2’‡8@2s
repository=last_indexed_oid: @contributor_status.repository.default_oid,"
C1C;*
B0B:2 ‘8@2Kagolast_viewed_at: 5.hours.ago,"
D#D&*
C"C%2Ñá8@2Mhourslast_viewed_at: 5.hours.ago,"
DD"*
CC!2˛É8@2Oago last_indexed_at: 10.minutes.ago,"
E'E**
D&D)2Ø≤8@2Sminutes last_indexed_at: 10.minutes.ago,"
EE&*
DD%2ßÆ8@2qreturns>@contributor_status.stubs(:data_fully_indexed?).returns(false)"
G9G@*
F8F?2ˆ˝8@2ostubs>@contributor_status.stubs(:data_fully_indexed?).returns(false)"
GG"*
FF!2⁄ﬂ8@2nreturns;@contributor_status.stubs(:serve_stale_data?).returns(true)"
H7H>*
G6G=2ª¬8@2lstubs;@contributor_status.stubs(:serve_stale_data?).returns(true)"
HH"*
GG!2°¶8@2èstubs^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
J1J6*
I0I52˙ˇ8@2êto_sym^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
JRJX*
IQIW2õ°8@2ñany_instance^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
J$J0*
I#I/2Ì˘8@2ëEventer^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
J	J#*
II"2“Ï8@2ì	RepoGraph^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
J	J*
II2“„8@2êGitHub^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => stale_data)"
J	J*
II2“ÿ8@2Åassert_equalIassert_equal parsed_stale, @contributor_status.send("#{graph_name}_data")"
K	K*
JJ2π≈8@2ysendIassert_equal parsed_stale, @contributor_status.send("#{graph_name}_data")"
K8K<*
J7J;2ËÏ8@2èstubs^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
N1N6*
M0M52åë8@2êto_sym^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
NRNX*
MQMW2≠≥8@2ñany_instance^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
N$N0*
M#M/2ˇã8@2ëEventer^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
N	N#*
MM"2‰˛8@2ì	RepoGraph^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
N	N*
MM2‰ı8@2êGitHub^GitHub::RepoGraph::Eventer.any_instance.stubs("fetch_#{graph_name}_data".to_sym => fresh_data)"
N	N*
MM2‰Í8@2Åassert_equalIassert_equal parsed_stale, @contributor_status.send("#{graph_name}_data")"
O	O*
NN2À◊8@2ysendIassert_equal parsed_stale, @contributor_status.send("#{graph_name}_data")"
O8O<*
N7N;2˙˛8@2preturns=@contributor_status.stubs(:data_fully_indexed?).returns(true)"
R9R@*
Q8Q?2õ¢8@2nstubs=@contributor_status.stubs(:data_fully_indexed?).returns(true)"
RR"*
QQ!2ˇÑ8@2oreturns<@contributor_status.stubs(:serve_stale_data?).returns(false)"
S7S>*
R6R=2ﬂÊ8@2mstubs<@contributor_status.stubs(:serve_stale_data?).returns(false)"
SS"*
RR!2≈ 8@2dsend4yield @contributor_status.send("#{graph_name}_data")"
U#U'*
T"T&2ëï8@2ITimecopTimecop.freeze(now) do"
AA*
@@2ﬁÂ8@2Kcontextcontext "validations" do"
ZZ
*
YY	2«Œ8@2Ntesttest "require a repository" do"
[[	*
ZZ2‰Ë8@2lbuild;status = build(:contribution_graph_status, repository: nil)"
\\*
[[2íó8@2\refute_predicate refute_predicate status, :valid?"
^^*
]]2Ã‹8@2wassert_includes<assert_includes status.errors[:repository], "can't be blank""
__*
^^2ÛÇ8@2nerrors<assert_includes status.errors[:repository], "can't be blank""
__$*
^^#2äê8@2[test+test "require one status per repository" do"
bb	*
aa2Ω¡8@2{buildJstatus = build(:contribution_graph_status, repository: @status.repository)"
cc*
bb2¯˝8@2Ä
repositoryJstatus = build(:contribution_graph_status, repository: @status.repository)"
cFcP*
bEbO2Æ∏8@2\refute_predicate refute_predicate status, :valid?"
ee*
dd2¡—8@2Çassert_includesGassert_includes status.errors[:repository_id], "has already been taken""
ff*
ee2Ë˜8@2yerrorsGassert_includes status.errors[:repository_id], "has already been taken""
ff$*
ee#2ˇÖ8@2]test-test "set up last_viewed_at automatically" do"
ii	*
hh2Ω¡8@2[build*status = build(:contribution_graph_status)"
jj*
ii2˙ˇ8@2V
assert_nil assert_nil status.last_viewed_at"
kk*
jj2¢¨8@2Zlast_viewed_at assert_nil status.last_viewed_at"
kk'*
jj&2¥¬8@2CfreezeTimecop.freeze do"
mm*
ll2“ÿ8@2\assert_predicate assert_predicate status, :valid?"
n	n*
mm2‰Ù8@2rassert_equal:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
o	o*
nn2çô8@2jto_i:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
o#o'*
n"n&2ß´8@2mcurrent:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
oo"*
nn!2ü¶8@2jTime:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
oo*
nn2öû8@2jto_i:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
o?oC*
n>nB2√«8@2tlast_viewed_at:assert_equal Time.current.to_i, status.last_viewed_at.to_i"
o0o>*
n/n=2¥¬8@2DTimecopTimecop.freeze do"
mm*
ll2 —8@2ctest3test "requires that last_viewed_at is not unset" do"
ss	*
rr2ﬂ„8@2Vlast_viewed_at@status.last_viewed_at = nil"
tt*
ss2°Ø8@2]refute_predicate!refute_predicate @status, :valid?"
vv*
uu2ΩÕ8@2|assert_includesAassert_includes @status.errors[:last_viewed_at], "can't be blank""
ww*
vv2ÂÙ8@2serrorsAassert_includes @status.errors[:last_viewed_at], "can't be blank""
ww%*
vv$2˝É 8@2~testNtest "requires that 'last_indexed_at' is set if we have 'last_indexed_oid'" do"
zz	*
yy2¥ ∏ 8@2Zlast_indexed_oid@status.last_indexed_oid = nil"
{{*
zz2ë!°!8@2Xlast_indexed_at@status.last_indexed_at = nil"
||*
{{2∂!≈!8@2]assert_predicate!assert_predicate @status, :valid?"
~~*
}}2”!„!8@2wlast_indexed_oid9@status.last_indexed_oid = @status.repository.default_oid"
ÄÄ*
2Ñ"î"8@2rdefault_oid9@status.last_indexed_oid = @status.repository.default_oid"
Ä5Ä@*
4?2™"µ"8@2q
repository9@status.last_indexed_oid = @status.repository.default_oid"
Ä*Ä4*
)32ü"©"8@2\last_indexed_at@status.last_indexed_at = nil"
ÅÅ*
ÄÄ2ƒ"”"8@2arefute_predicate!refute_predicate @status, :valid?"
ÉÉ*
ÇÇ2·"Ò"8@2Åassert_includesBassert_includes @status.errors[:last_indexed_at], "can't be blank""
ÑÑ*
ÉÉ2â#ò#8@2xerrorsBassert_includes @status.errors[:last_indexed_at], "can't be blank""
ÑÑ%*
ÉÉ$2°#ß#8@2ÅtestMtest "requires that 'job_enqueued_at' is set if we have a 'job_status_id'" do"
áá	*
ÜÜ2Ÿ#›#8@2Xjob_status_id@status.job_status_id = nil"
àà*
áá2µ$¬$8@2\job_enqueued_at@status.job_enqueued_at = nil"
ââ*
àà2◊$Ê$8@2aassert_predicate!assert_predicate @status, :valid?"
ãã*
ää2Ù$Ñ%8@2fjob_status_id)@status.job_status_id = SecureRandom.uuid"
çç*
åå2•%≤%8@2]uuid)@status.job_status_id = SecureRandom.uuid"
ç,ç0*
å+å/2¬%∆%8@2eSecureRandom)@status.job_status_id = SecureRandom.uuid"
çç+*
åå*2µ%¡%8@2\job_enqueued_at@status.job_enqueued_at = nil"
éé*
çç2’%‰%8@2arefute_predicate!refute_predicate @status, :valid?"
êê*
èè2Ú%Ç&8@2Åassert_includesBassert_includes @status.errors[:job_enqueued_at], "can't be blank""
ëë*
êê2ö&©&8@2xerrorsBassert_includes @status.errors[:job_enqueued_at], "can't be blank""
ëë%*
êê$2≤&∏&8@2Lcontextcontext "#destroy" do"
ïï
*
îî	2Ó&ı&8@2Ztest&test "deletes metrics from Eventer" do"
ññ	*
ïï2à'å'8@2xexpectsAGitHub::RepoGraph::Eventer.any_instance.expects(:delete_counters)"
ó/ó6*
ñ.ñ52›'‰'8@2}any_instanceAGitHub::RepoGraph::Eventer.any_instance.expects(:delete_counters)"
ó"ó.*
ñ!ñ-2–'‹'8@2xEventerAGitHub::RepoGraph::Eventer.any_instance.expects(:delete_counters)"
óó!*
ññ 2µ'œ'8@2z	RepoGraphAGitHub::RepoGraph::Eventer.any_instance.expects(:delete_counters)"
óó*
ññ2µ'∆'8@2wGitHubAGitHub::RepoGraph::Eventer.any_instance.expects(:delete_counters)"
óó*
ññ2µ'ª'8@2Lassertassert @status.destroy"
òò*
óó2˝'É(8@2Mdestroyassert @status.destroy"
òò*
óó2å(ì(8@2Lcontextcontext ".expired" do"
úú
*
õõ	2•(¨(8@2jtest6test "finds records not viewed in the last 28 days" do"
ùù	*
úú2ø(√(8@2}createGstale = create(:contribution_graph_status, last_viewed_at: 90.days.ago)"
ûû*
ùù2Ñ)ä)8@2zagoGstale = create(:contribution_graph_status, last_viewed_at: 90.days.ago)"
ûJûM*
ùIùL2ø)¬)8@2{daysGstale = create(:contribution_graph_status, last_viewed_at: 90.days.ago)"
ûEûI*
ùDùH2∫)æ)8@2åcreateVstale2 = create(:contribution_graph_status, last_viewed_at: (28.days.ago - 5.minutes))"
üü*
ûû2”)Ÿ)8@2âagoVstale2 = create(:contribution_graph_status, last_viewed_at: (28.days.ago - 5.minutes))"
üLüO*
ûKûN2è*í*8@2ädaysVstale2 = create(:contribution_graph_status, last_viewed_at: (28.days.ago - 5.minutes))"
üGüK*
ûFûJ2ä*é*8@2çminutesVstale2 = create(:contribution_graph_status, last_viewed_at: (28.days.ago - 5.minutes))"
üTü[*
ûSûZ2ó*û*8@2ãcreateUfresh = create(:contribution_graph_status, last_viewed_at: (28.days.ago + 5.minutes))"
††*
üü2Ø*µ*8@2àagoUfresh = create(:contribution_graph_status, last_viewed_at: (28.days.ago + 5.minutes))"
†K†N*
üJüM2Î*Ó*8@2âdaysUfresh = create(:contribution_graph_status, last_viewed_at: (28.days.ago + 5.minutes))"
†F†J*
üEüI2Ê*Í*8@2åminutesUfresh = create(:contribution_graph_status, last_viewed_at: (28.days.ago + 5.minutes))"
†S†Z*
üRüY2Û*˙*8@2lexpired5expired = Repository::ContributionGraphStatus.expired"
¢5¢<*
°4°;2≤+π+8@2|ContributionGraphStatus5expired = Repository::ContributionGraphStatus.expired"
¢¢4*
°°32é+±+8@2o
Repository5expired = Repository::ContributionGraphStatus.expired"
¢¢*
°°2é+ò+8@2]assert_includesassert_includes expired, stale"
££*
¢¢2¿+œ+8@2^assert_includesassert_includes expired, stale2"
§§*
££2Â+Ù+8@2]refute_includesrefute_includes expired, fresh"
••*
§§2ã,ö,8@2Scontextcontext ".for_repository" do"
©©
*
®®	2ª,¬,8@2ctest/test "finds the status if it already exists" do"
™™	*
©©2‹,‡,8@2òassert_equal\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
´´*
™™2í-û-8@2öfor_repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
´A´O*
™@™N2Ã-⁄-8@2ñ
repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
´X´b*
™W™a2„-Ì-8@2£ContributionGraphStatus\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
´´@*
™™?2®-À-8@2ñ
Repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
´´'*
™™&2®-≤-8@2jtest6test "creates the status if one does not yet exist" do"
ÆÆ	*
≠≠2¸-Ä.8@2Ocreaterepo = create :repository"
ØØ*
ÆÆ2¿.∆.8@2äassert_differenceIstatus = assert_difference "Repository::ContributionGraphStatus.count" do"
±±!*
∞∞ 2„.Ù.8@2vfor_repository8Repository::ContributionGraphStatus.for_repository(repo)"
≤-≤;*
±,±:2–/ﬁ/8@2ContributionGraphStatus8Repository::ContributionGraphStatus.for_repository(repo)"
≤	≤,*
±±+2¨/œ/8@2r
Repository8Repository::ContributionGraphStatus.for_repository(repo)"
≤	≤*
±±2¨/∂/8@2`assert_equal$assert_equal repo, status.repository"
µµ*
¥¥2ˆ/Ç08@2^
repository$assert_equal repo, status.repository"
µ!µ+*
¥ ¥*2ê0ö08@2xtestDtest "handles race conditions resulting in a DB constraint error" do"
∏∏	*
∑∑2®0¨08@2Mreturnsreturns([], [@status])"
∫	∫*
ππ2€1‚18@2îtwice_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
π`πe*
∏_∏d2Ã1—18@2ìwith_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
π;π?*
∏:∏>2ß1´18@2ô
repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
πTπ^*
∏S∏]2¿1 18@2ñexpects_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
π+π2*
∏*∏12ó1û18@2¶ContributionGraphStatus_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
ππ**
∏∏)2Û0ñ18@2ô
Repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
ππ*
∏∏2Û0˝08@2ëraises[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ª=ªC*
∫<∫B2Æ2¥28@2öRecordNotUnique[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ªDªa*
∫C∫`2µ2“28@2óActiveRecord[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ªDªP*
∫C∫O2µ2¡28@2íexpects[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ª+ª2*
∫*∫12ú2£28@2¢ContributionGraphStatus[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ªª**
∫∫)2¯1õ28@2ï
Repository[Repository::ContributionGraphStatus.expects(:create!).raises(ActiveRecord::RecordNotUnique)"
ªª*
∫∫2¯1Ç28@2òassert_equal\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ΩΩ*
ºº2€2Á28@2öfor_repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ΩAΩO*
º@ºN2ï3£38@2ñ
repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ΩXΩb*
ºWºa2¨3∂38@2£ContributionGraphStatus\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ΩΩ@*
ºº?2Ò2î38@2ñ
Repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ΩΩ'*
ºº&2Ò2˚28@2utestAtest "handles race conditions resulting in a validation error" do"
¿¿	*
øø2≈3…38@2Mreturnsreturns([], [@status])"
¬	¬*
¡¡2ı4¸48@2îtwice_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡`¡e*
¿_¿d2Ê4Î48@2ìwith_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡;¡?*
¿:¿>2¡4≈48@2ô
repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡T¡^*
¿S¿]2⁄4‰48@2ñexpects_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡+¡2*
¿*¿12±4∏48@2¶ContributionGraphStatus_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡¡**
¿¿)2ç4∞48@2ô
Repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
¡¡*
¿¿2ç4ó48@2òassert_equal\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ƒƒ*
√√2ì5ü58@2öfor_repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ƒAƒO*
√@√N2Õ5€58@2ñ
repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ƒXƒb*
√W√a2‰5Ó58@2£ContributionGraphStatus\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ƒƒ@*
√√?2©5Ã58@2ñ
Repository\assert_equal @status, Repository::ContributionGraphStatus.for_repository(@status.repository)"
ƒƒ'*
√√&2©5≥58@2stest?test "only retries one time if a race condition is expected" do"
««	*
∆∆2˝5Å68@2Freturnsreturns([], [])"
…	…*
»»2´7≤78@2îtwice_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»`»e*
«_«d2ú7°78@2ìwith_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»;»?*
«:«>2˜6˚68@2ô
repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»T»^*
«S«]2ê7ö78@2ñexpects_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»+»2*
«*«12Á6Ó68@2¶ContributionGraphStatus_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»»**
««)2√6Ê68@2ô
Repository_Repository::ContributionGraphStatus.expects(:where).with(repository: @status.repository).twice."
»»*
««2√6Õ68@2iassert_raises,assert_raises ActiveRecord::RecordInvalid do"
ÀÀ*
  2¬7œ78@2iRecordInvalid,assert_raises ActiveRecord::RecordInvalid do"
ÀÀ0*
  /2–7Î78@2hActiveRecord,assert_raises ActiveRecord::RecordInvalid do"
ÀÀ!*
   2–7‹78@2Ñfor_repositoryFRepository::ContributionGraphStatus.for_repository(@status.repository)"
Ã-Ã;*
À,À:2õ8©88@2Ä
repositoryFRepository::ContributionGraphStatus.for_repository(@status.repository)"
ÃDÃN*
ÀCÀM2≤8º88@2çContributionGraphStatusFRepository::ContributionGraphStatus.for_repository(@status.repository)"
Ã	Ã,*
ÀÀ+2˜7ö88@2Ä
RepositoryFRepository::ContributionGraphStatus.for_repository(@status.repository)"
Ã	Ã*
ÀÀ2˜7Å88@2Ocontextcontext "#job_status" do"
——
*
––	2Ÿ8‡88@2ptest<test "returns nil if there isn't a tracked job status ID" do"
““	*
——2ˆ8˙88@2Z
assert_nil assert_nil @status.job_status_id"
””*
““2π9√98@2]job_status_id assert_nil @status.job_status_id"
””'*
““&2Ã9Ÿ98@2W
assert_nilassert_nil @status.job_status"
‘‘*
””2‡9Í98@2W
job_statusassert_nil @status.job_status"
‘‘$*
””#2Û9˝98@2ÇtestNtest "returns nil if there isn't an existing status with the job status ID" do"
◊◊	*
÷÷2ã:è:8@2fjob_status_id)@status.job_status_id = SecureRandom.uuid"
ÿÿ*
◊◊2Ë:ı:8@2]uuid)@status.job_status_id = SecureRandom.uuid"
ÿ,ÿ0*
◊+◊/2Ö;â;8@2eSecureRandom)@status.job_status_id = SecureRandom.uuid"
ÿÿ+*
◊◊*2¯:Ñ;8@2W
assert_nilassert_nil @status.job_status"
ŸŸ*
ÿÿ2ê;ö;8@2W
job_statusassert_nil @status.job_status"
ŸŸ$*
ÿÿ#2£;≠;8@2_test+test "returns a JobStatus if one exists" do"
‹‹	*
€€2ª;ø;8@2Screatejob_status = JobStatus.create"
››$*
‹‹#2Ñ<ä<8@2V	JobStatusjob_status = JobStatus.create"
››*
‹‹2˙;É<8@2bjob_status_id%@status.job_status_id = job_status.id"
ﬁﬁ*
››2ô<¶<8@2Wid%@status.job_status_id = job_status.id"
ﬁ*ﬁ,*
›)›+2¥<∂<8@2massert_equal1assert_equal job_status.id, @status.job_status.id"
ﬂﬂ*
ﬁﬁ2Ω<…<8@2cid1assert_equal job_status.id, @status.job_status.id"
ﬂﬂ!*
ﬁﬁ 2’<◊<8@2cid1assert_equal job_status.id, @status.job_status.id"
ﬂ6ﬂ8*
ﬁ5ﬁ72Ï<Ó<8@2k
job_status1assert_equal job_status.id, @status.job_status.id"
ﬂ+ﬂ5*
ﬁ*ﬁ42·<Î<8@2Tcontextcontext "#job_enqueued_at" do"
„„
*
‚‚	2Ä=á=8@2ntest:test "backfills to updated_at on-read if it wasn't set" do"
‰‰	*
„„2¢=¶=8@2\freeze&Timecop.freeze(5.minutes.ago) do |now|"
ÂÂ*
‰‰2Î=Ò=8@2Yago&Timecop.freeze(5.minutes.ago) do |now|"
Â Â#*
‰‰"2¸=ˇ=8@2]minutes&Timecop.freeze(5.minutes.ago) do |now|"
ÂÂ*
‰‰2Ù=˚=8@2úupdate_columns^@status.update_columns job_status_id: SecureRandom.uuid, job_enqueued_at: nil, updated_at: now"
ÊÊ*
ÂÂ2ö>®>8@2íuuid^@status.update_columns job_status_id: SecureRandom.uuid, job_enqueued_at: nil, updated_at: now"
Ê<Ê@*
Â;Â?2≈>…>8@2öSecureRandom^@status.update_columns job_status_id: SecureRandom.uuid, job_enqueued_at: nil, updated_at: now"
Ê/Ê;*
Â.Â:2∏>ƒ>8@2]Timecop&Timecop.freeze(5.minutes.ago) do |now|"
ÂÂ*
‰‰2„=Í=8@2W
updated_atexpected = @status.updated_at"
ÈÈ$*
ËË#2ï?ü?8@2óassert_equal[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍÍ*
ÈÈ2¶?≤?8@2öjob_enqueued_at[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍSÍb*
ÈRÈa2Ú?Å@8@2èfind[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍBÍF*
ÈAÈE2·?Â?8@2çid[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍOÍQ*
ÈNÈP2Ó??8@2¢ContributionGraphStatus[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍÍA*
ÈÈ@2Ω?‡?8@2ï
Repository[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).job_enqueued_at"
ÍÍ(*
ÈÈ'2Ω?«?8@2Mcontextcontext "#running?" do"
ÓÓ
*
ÌÌ	2ì@ö@8@2gtest3test "returns false if there isn't a job status" do"
ÔÔ	*
ÓÓ2Æ@≤@8@2W
assert_nilassert_nil @status.job_status"
*
ÔÔ2Ë@Ú@8@2W
job_statusassert_nil @status.job_status"
$*
ÔÔ#2˚@ÖA8@2crefute_predicate#refute_predicate @status, :running?"
ÒÒ*
2åAúA8@2rtest>test "returns true if the job status is pending or running" do"
ÙÙ	*
ÛÛ2ΩA¡A8@2Screatejob_status = JobStatus.create"
ˆˆ$*
ıı#2öB†B8@2V	JobStatusjob_status = JobStatus.create"
ˆˆ*
ıı2êBôB8@2bjob_status_id%@status.job_status_id = job_status.id"
˜˜*
ˆˆ2ØBºB8@2Wid%@status.job_status_id = job_status.id"
˜*˜,*
ˆ)ˆ+2 BÃB8@2nassert_predicate.assert_predicate @status.job_status, :pending?"
˘˘*
¯¯2‘B‰B8@2h
job_status.assert_predicate @status.job_status, :pending?"
˘ ˘**
¯¯)2ÌB˜B8@2cassert_predicate#assert_predicate @status, :running?"
˙˙*
˘˘2âCôC8@2Sstarted!@status.job_status.started!"
¸¸"*
˚˚!2«CœC8@2U
job_status@status.job_status.started!"
¸¸*
˚˚2ºC∆C8@2nassert_predicate.assert_predicate @status.job_status, :started?"
˝˝*
¸¸2÷CÊC8@2h
job_status.assert_predicate @status.job_status, :started?"
˝ ˝**
¸¸)2ÔC˘C8@2cassert_predicate#assert_predicate @status, :running?"
˛˛*
˝˝2ãDõD8@2itest5test "returns false if the job status is finished" do"
ÅÅ	*
ÄÄ2ºD¿D8@2Screatejob_status = JobStatus.create"
ÇÇ$*
ÅÅ#2èEïE8@2V	JobStatusjob_status = JobStatus.create"
ÇÇ*
ÅÅ2ÖEéE8@2bjob_status_id%@status.job_status_id = job_status.id"
ÉÉ*
ÇÇ2§E±E8@2Wid%@status.job_status_id = job_status.id"
É*É,*
Ç)Ç+2øE¡E8@2Ssuccess!@status.job_status.success!"
ÖÖ"*
ÑÑ!2‹E‰E8@2U
job_status@status.job_status.success!"
ÖÖ*
ÑÑ2—E€E8@2nassert_predicate.assert_predicate @status.job_status, :success?"
ÜÜ*
ÖÖ2ÎE˚E8@2h
job_status.assert_predicate @status.job_status, :success?"
Ü Ü**
ÖÖ)2ÑFéF8@2crefute_predicate#refute_predicate @status, :running?"
áá*
ÜÜ2†F∞F8@2Oerror!@status.job_status.error!"
ââ *
àà2ﬁF‰F8@2S
job_status@status.job_status.error!"
ââ*
àà2”F›F8@2lassert_predicate,assert_predicate @status.job_status, :error?"
ää*
ââ2ÎF˚F8@2f
job_status,assert_predicate @status.job_status, :error?"
ä ä**
ââ)2ÑGéG8@2crefute_predicate#refute_predicate @status, :running?"
ãã*
ää2ûGÆG8@2ktest7test "sets the job status' ttl if it is unspecified" do"
éé	*
çç2œG”G8@2Screatejob_status = JobStatus.create"
èè$*
éé#2§H™H8@2V	JobStatusjob_status = JobStatus.create"
èè*
éé2öH£H8@2bjob_status_id%@status.job_status_id = job_status.id"
ëë*
êê2∫H«H8@2Wid%@status.job_status_id = job_status.id"
ë*ë,*
ê)ê+2’H◊H8@2oassert_equal3assert_equal JobStatus::DEFAULT_TTL, job_status.ttl"
ìì*
íí2ﬂHÎH8@2nDEFAULT_TTL3assert_equal JobStatus::DEFAULT_TTL, job_status.ttl"
ìì**
íí)2ÏHÇI8@2l	JobStatus3assert_equal JobStatus::DEFAULT_TTL, job_status.ttl"
ìì*
íí2ÏHıH8@2fttl3assert_equal JobStatus::DEFAULT_TTL, job_status.ttl"
ì7ì:*
í6í92èIíI8@2cassert_predicate#assert_predicate @status, :running?"
îî*
ìì2ôI©I8@2`find!+job_status = JobStatus.find!(job_status.id)"
ññ#*
ïï"2€I‡I8@2]id+job_status = JobStatus.find!(job_status.id)"
ñ/ñ1*
ï.ï02ÏIÓI8@2d	JobStatus+job_status = JobStatus.find!(job_status.id)"
ññ*
ïï2—I⁄I8@2åassert_equalPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
óó*
ññ2ˆIÇJ8@2éJOB_STATUS_TTLPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
óóG*
ññF2ÉJ∂J8@2óContributionGraphStatusPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
óó7*
ññ62ÉJ¶J8@2ä
RepositoryPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
óó*
ññ2ÉJçJ8@2ÉttlPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
óTóW*
ñSñV2√J∆J8@2Mcontextcontext "#current?" do"
õõ
*
öö	2ÿJﬂJ8@2utestAtest "returns false if repo graph data has never been indexed" do"
úú	*
õõ2ÛJ˜J8@2_build*status = build(:contribution_graph_status)"
ùù*
úú2ƒK…K8@2brefute_predicate"refute_predicate status, :current?"
ûû*
ùù2ÏK¸K8@2qtest=test "returns false if the repo graph data is out of date" do"
°°	*
††2úL†L8@2Éupdate!L@status.update! last_indexed_oid: "2c6363c328126bdee83e9f8dd55ad1db3a2aa160""
¢¢*
°°2ËLÔL8@2crefute_predicate#refute_predicate @status, :current?"
§§*
££2¥MƒM8@2ltest8test "returns true if the repo graph data is current" do"
ßß	*
¶¶2ÂMÈM8@2wupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
®®*
ßß2¨N≥N8@2{default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
®<®G*
ß;ßF2ŸN‰N8@2z
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
®1®;*
ß0ß:2ŒNÿN8@2cassert_predicate#assert_predicate @status, :current?"
©©*
®®2ÎN˚N8@2Xcontext!context "#enqueue_metrics_job" do"
≠≠
*
¨¨	2†OßO8@2ktest7test "does nothing if the status is already current" do"
ÆÆ	*
≠≠2∆O O8@2wupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
ØØ*
ÆÆ2åPìP8@2{default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
Ø<ØG*
Æ;ÆF2πPƒP8@2z
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
Ø1Ø;*
Æ0Æ:2ÆP∏P8@2cassert_predicate#assert_predicate @status, :current?"
∞∞*
ØØ2ÀP€P8@2snever>RepositoryContributionMetricsJob.expects(:perform_later).never"
≤@≤E*
±?±D2ØQ¥Q8@2uexpects>RepositoryContributionMetricsJob.expects(:perform_later).never"
≤(≤/*
±'±.2óQûQ8@2é RepositoryContributionMetricsJob>RepositoryContributionMetricsJob.expects(:perform_later).never"
≤≤'*
±±&2ˆPñQ8@2`
assert_nil&assert_nil @status.enqueue_metrics_job"
¥¥*
≥≥2ºQ∆Q8@2ienqueue_metrics_job&assert_nil @status.enqueue_metrics_job"
¥¥-*
≥≥,2œQ‚Q8@2ptest<test "does nothing if the metrics job is already running" do"
∑∑	*
∂∂2QÙQ8@2Screatejob_status = JobStatus.create"
∏∏$*
∑∑#2 R–R8@2V	JobStatusjob_status = JobStatus.create"
∏∏*
∑∑2¿R…R8@2bjob_status_id%@status.job_status_id = job_status.id"
ππ*
∏∏2ﬂRÏR8@2Wid%@status.job_status_id = job_status.id"
π*π,*
∏)∏+2˙R¸R8@2Sstarted!@status.job_status.started!"
∫∫"*
ππ!2ñSûS8@2U
job_status@status.job_status.started!"
∫∫*
ππ2ãSïS8@2crefute_predicate#refute_predicate @status, :current?"
ºº*
ªª2¶S∂S8@2cassert_predicate#assert_predicate @status, :running?"
ΩΩ*
ºº2–S‡S8@2snever>RepositoryContributionMetricsJob.expects(:perform_later).never"
ø@øE*
æ?æD2¥TπT8@2uexpects>RepositoryContributionMetricsJob.expects(:perform_later).never"
ø(ø/*
æ'æ.2úT£T8@2é RepositoryContributionMetricsJob>RepositoryContributionMetricsJob.expects(:perform_later).never"
øø'*
ææ&2˚SõT8@2`
assert_nil&assert_nil @status.enqueue_metrics_job"
¡¡*
¿¿2¡TÀT8@2ienqueue_metrics_job&assert_nil @status.enqueue_metrics_job"
¡¡-*
¿¿,2‘TÁT8@2xtestDtest "creates a JobStatus and returns its ID to track job status" do"
ƒƒ	*
√√2ıT˘T8@2Z
assert_nil assert_nil @status.job_status_id"
≈≈*
ƒƒ2¿U U8@2]job_status_id assert_nil @status.job_status_id"
≈≈'*
ƒƒ&2”U‡U8@2hassert2assert job_status_id = @status.enqueue_metrics_job"
««*
∆∆2ËUÓU8@2uenqueue_metrics_job2assert job_status_id = @status.enqueue_metrics_job"
«&«9*
∆%∆82áVöV8@2massert_equal1assert_equal job_status_id, @status.job_status_id"
»»*
««2°V≠V8@2njob_status_id1assert_equal job_status_id, @status.job_status_id"
»+»8*
«*«72≈V“V8@2^find*job_status = JobStatus.find(job_status_id)"
  "*
……!2ÒVıV8@2c	JobStatus*job_status = JobStatus.find(job_status_id)"
  *
……2ÁVV8@2nassert8assert job_status, "expected a job status to be created""
ÀÀ*
  2ãWëW8@2åassert_equalPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
ÕÕ*
ÃÃ2ÀW◊W8@2éJOB_STATUS_TTLPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
ÕÕG*
ÃÃF2ÿWãX8@2óContributionGraphStatusPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
ÕÕ7*
ÃÃ62ÿW˚W8@2ä
RepositoryPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
ÕÕ*
ÃÃ2ÿW‚W8@2ÉttlPassert_equal Repository::ContributionGraphStatus::JOB_STATUS_TTL, job_status.ttl"
ÕTÕW*
ÃSÃV2òXõX8@2`test,test "enqueues a job to generate metrics" do"
––	*
œœ2©X≠X8@2ìwith_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
“	“*
——2ûY¢Y8@2ödefault_oid_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
“\“g*
—[—f2ÒY¸Y8@2ô
repository_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
“Q“[*
—P—Z2ÊYY8@2pexpects9RepositoryContributionMetricsJob.expects(:perform_later)."
—(—/*
–'–.2˝XÑY8@2â RepositoryContributionMetricsJob9RepositoryContributionMetricsJob.expects(:perform_later)."
——'*
––&2‹X¸X8@2Xassert"assert @status.enqueue_metrics_job"
‘‘*
””2ÖZãZ8@2eenqueue_metrics_job"assert @status.enqueue_metrics_job"
‘‘)*
””(2îZßZ8@2`context)context "#enqueue_rebuild_metrics_job" do"
ÿÿ
*
◊◊	2πZ¿Z8@2ptest<test "does nothing if the metrics job is already running" do"
ŸŸ	*
ÿÿ2ÁZÎZ8@2Screatejob_status = JobStatus.create"
⁄⁄$*
ŸŸ#2¡[«[8@2V	JobStatusjob_status = JobStatus.create"
⁄⁄*
ŸŸ2∑[¿[8@2bjob_status_id%@status.job_status_id = job_status.id"
€€*
⁄⁄2÷[„[8@2Wid%@status.job_status_id = job_status.id"
€*€,*
⁄)⁄+2Ò[Û[8@2Sstarted!@status.job_status.started!"
‹‹"*
€€!2ç\ï\8@2U
job_status@status.job_status.started!"
‹‹*
€€2Ç\å\8@2cassert_predicate#assert_predicate @status, :running?"
ﬁﬁ*
››2ù\≠\8@2snever>RepositoryContributionMetricsJob.expects(:perform_later).never"
‡@‡E*
ﬂ?ﬂD2Å]Ü]8@2uexpects>RepositoryContributionMetricsJob.expects(:perform_later).never"
‡(‡/*
ﬂ'ﬂ.2È\\8@2é RepositoryContributionMetricsJob>RepositoryContributionMetricsJob.expects(:perform_later).never"
‡‡'*
ﬂﬂ&2»\Ë\8@2h
assert_nil.assert_nil @status.enqueue_rebuild_metrics_job"
‚‚*
··2é]ò]8@2yenqueue_rebuild_metrics_job.assert_nil @status.enqueue_rebuild_metrics_job"
‚‚5*
··42°]º]8@2xtestDtest "creates a JobStatus and returns its ID to track job status" do"
ÂÂ	*
‰‰2 ]Œ]8@2Z
assert_nil assert_nil @status.job_status_id"
ÊÊ*
ÂÂ2ï^ü^8@2]job_status_id assert_nil @status.job_status_id"
ÊÊ'*
ÂÂ&2®^µ^8@2passert:assert job_status_id = @status.enqueue_rebuild_metrics_job"
ËË*
ÁÁ2Ω^√^8@2Öenqueue_rebuild_metrics_job:assert job_status_id = @status.enqueue_rebuild_metrics_job"
Ë&ËA*
Á%Á@2‹^˜^8@2massert_equal1assert_equal job_status_id, @status.job_status_id"
ÈÈ*
ËË2˛^ä_8@2njob_status_id1assert_equal job_status_id, @status.job_status_id"
È+È8*
Ë*Ë72¢_Ø_8@2ÅassertKassert JobStatus.find(job_status_id), "expected a job status to be created""
ÍÍ*
ÈÈ2∂_º_8@2findKassert JobStatus.find(job_status_id), "expected a job status to be created""
ÍÍ*
ÈÈ2«_À_8@2Ñ	JobStatusKassert JobStatus.find(job_status_id), "expected a job status to be created""
ÍÍ*
ÈÈ2Ω_∆_8@2Utest!test "clears last_indexed_oid" do"
ÌÌ	*
ÏÏ2è`ì`8@2wupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
ÓÓ*
ÌÌ2ø`∆`8@2{default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
Ó<ÓG*
Ì;ÌF2Ï`˜`8@2z
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
Ó1Ó;*
Ì0Ì:2·`Î`8@2`assert*assert @status.enqueue_rebuild_metrics_job"
*
ÔÔ2ˇ`Öa8@2uenqueue_rebuild_metrics_job*assert @status.enqueue_rebuild_metrics_job"
1*
ÔÔ02éa©a8@2d
assert_nil*assert_nil @status.reload.last_indexed_oid"
ÒÒ*
2∞a∫a8@2jlast_indexed_oid*assert_nil @status.reload.last_indexed_oid"
Ò!Ò1*
 02 a⁄a8@2`reload*assert_nil @status.reload.last_indexed_oid"
ÒÒ *
2√a…a8@2_test+test "enqueues a job to rebuild metrics" do"
ÙÙ	*
ÛÛ2ËaÏa8@2wupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
ıı*
ÙÙ2¢b©b8@2{default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
ı<ıG*
Ù;ÙF2œb⁄b8@2z
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
ı1ı;*
Ù0Ù:2ƒbŒb8@2ìwith_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
¯	¯*
˜˜2§c®c8@2ödefault_oid_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
¯\¯g*
˜[˜f2˜cÇd8@2ô
repository_with(contribution_graph_status: @status, from_oid: nil, to_oid: @status.repository.default_oid)"
¯Q¯[*
˜P˜Z2Ïcˆc8@2pexpects9RepositoryContributionMetricsJob.expects(:perform_later)."
˜(˜/*
ˆ'ˆ.2Écäc8@2â RepositoryContributionMetricsJob9RepositoryContributionMetricsJob.expects(:perform_later)."
˜˜'*
ˆˆ&2‚bÇc8@2`assert*assert @status.enqueue_rebuild_metrics_job"
˙˙*
˘˘2ãdëd8@2uenqueue_rebuild_metrics_job*assert @status.enqueue_rebuild_metrics_job"
˙˙1*
˘˘02ödµd8@2Ucontextcontext "#generate_metrics" do"
˛˛
*
˝˝	2«dŒd8@2gtest3test "publishes contribution metrics to Eventer" do"
ˇˇ	*
˛˛2ÍdÓd8@2sreturns<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
ÄÄ&*
ˇˇ%2ºe√e8@2onew<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
Ä?ÄB*
ˇ>ˇA2‹eﬂe8@2{MemoryDogstatsD<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
Ä'Ä>*
ˇ&ˇ=2ƒe€e8@2rGitHub<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
Ä'Ä-*
ˇ&ˇ,2ƒe e8@2qstubs<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
ÄÄ*
ˇˇ2´e∞e8@2rGitHub<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
ÄÄ*
ˇˇ2§e™e8@2QstubsEventer::Event.stubs(:track)"
ÅÅ*
ÄÄ2ˆe˚e8@2QEventEventer::Event.stubs(:track)"
ÅÅ*
ÄÄ2Áeıe8@2SEventerEventer::Event.stubs(:track)"
ÅÅ*
ÄÄ2ÁeÓe8@2aassert_metrics_publishedassert_metrics_published("
ÇÇ*
ÅÅ2äf¢f8@2aassert_metrics_publishedassert_metrics_published("
áá*
ÜÜ2ßgøg8@2aassert_metrics_publishedassert_metrics_published("
åå*
ãã2æh÷h8@2ègenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
íí*
ëë2‡ii8@2ädefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
íJíU*
ëIëT2õj¶j8@2â
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
í?íI*
ë>ëH2êjöj8@2êassert_timingSassert_timing("repographs.generate_metrics.fetch_from_git", tags: ["subset:false"])"
ìì*
íí2Æjªj8@2îassert_timingWassert_timing("repographs.generate_metrics.publish_to_eventer", tags: ["subset:false"])"
îî*
ìì2àkïk8@2stest?test "does not publish metrics with a value of 0 to Eventer" do"
óó	*
ññ2ÌkÒk8@2õneverfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
òhòm*
ógól2îmôm8@2öwithfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
ò&ò**
ó%ó)2“l÷l8@2ü	ADDITIONSfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
ò+òP*
ó*óO2◊l¸l8@2ùEventerfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
ò+òE*
ó*óD2◊lÒl8@2ü	RepoGraphfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
ò+ò<*
ó*ó;2◊lËl8@2úGitHubfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
ò+ò1*
ó*ó02◊l›l8@2ü	has_entryfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
òRò[*
óQóZ2˛lám8@2ùexpectsfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
òò*
óó2¬l…l8@2õEventfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
òò*
óó2≥l¡l8@2ùEventerfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::ADDITIONS, has_entry(:delta, 0)).never"
òò*
óó2≥l∫l8@2õneverfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ôhôm*
ògòl2ÅnÜn8@2öwithfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ô&ô**
ò%ò)2øm√m8@2ü	DELETIONSfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ô+ôP*
ò*òO2ƒmÈm8@2ùEventerfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ô+ôE*
ò*òD2ƒmﬁm8@2ü	RepoGraphfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ô+ô<*
ò*ò;2ƒm’m8@2úGitHubfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ô+ô1*
ò*ò02ƒm m8@2ü	has_entryfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ôRô[*
òQòZ2ÎmÙm8@2ùexpectsfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ôô*
òò2Øm∂m8@2õEventfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ôô*
òò2†mÆm8@2ùEventerfEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::DELETIONS, has_entry(:delta, 0)).never"
ôô*
òò2†mßm8@2ìat_least_onceVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
üPü]*
ûOû\2Óp˚p8@2äwithVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
ü&ü**
û%û)2ƒp»p8@2éanythingVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
ü+ü3*
û*û22…p—p8@2âNotVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
ü5ü8*
û4û72”p÷p8@2è	has_entryVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
ü9üB*
û8ûA2◊p‡p8@2çexpectsVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
üü*
ûû2¥pªp8@2ãEventVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
üü*
ûû2•p≥p8@2çEventerVEventer::Event.expects(:track).with(anything, Not(has_entry(:delta, 0))).at_least_once"
üü*
ûû2•p¨p8@2ègenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
°°*
††2ãqõq8@2ädefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
°J°U*
†I†T2∆q—q8@2â
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
°?°I*
†>†H2ªq≈q8@2ftest2test "handles author emails with invalid utf-8" do"
§§	*
££2‡q‰q8@2ÅreturnsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
•H•O*
§G§N2⁄r·r8@2òbg{author: "\xF0\xA4\xAD\xE2@example.org".b, date: "2012-02-03", commits: 2, additions: 2, deletions: 2},"
ß1ß2*
¶0¶12ˆs˜s8@2ÅexpectsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
••%*
§§$2∞r∑r8@2}rpcJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
••*
§§2¨rØr8@2Ñ
repositoryJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
••*
§§2°r´r8@2QstubsEventer::Event.stubs(:track)"
©©*
®®2‘tŸt8@2QEventEventer::Event.stubs(:track)"
©©*
®®2≈t”t8@2SEventerEventer::Event.stubs(:track)"
©©*
®®2≈tÃt8@2aassert_metrics_publishedassert_metrics_published("
™™*
©©2ËtÄu8@2aassert_metrics_publishedassert_metrics_published("
ØØ*
ÆÆ2˛uñv8@2ègenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
µµ*
¥¥2†w∞w8@2ädefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
µJµU*
¥I¥T2€wÊw8@2â
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
µ?µI*
¥>¥H2–w⁄w8@2ztestFtest "normalizes stealth email addresses before sending to Eventer" do"
∏∏	*
∑∑2ıw˘w8@2ÅreturnsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
πHπO*
∏G∏N2Éyäy8@2æstealth_email_host_namew{author: "42+defunkt@#{ GitHub.stealth_email_host_name }", date: "2012-02-03", commits: 2, additions: 2, deletions: 2},"
ª(ª?*
∫'∫>2¢zπz8@2≠GitHubw{author: "42+defunkt@#{ GitHub.stealth_email_host_name }", date: "2012-02-03", commits: 2, additions: 2, deletions: 2},"
ª!ª'*
∫ ∫&2õz°z8@2ÅexpectsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ππ%*
∏∏$2Ÿx‡x8@2}rpcJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ππ*
∏∏2’xÿx8@2Ñ
repositoryJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ππ*
∏∏2 x‘x8@2QstubsEventer::Event.stubs(:track)"
ΩΩ*
ºº2ô{û{8@2QEventEventer::Event.stubs(:track)"
ΩΩ*
ºº2ä{ò{8@2SEventerEventer::Event.stubs(:track)"
ΩΩ*
ºº2ä{ë{8@2aassert_metrics_publishedassert_metrics_published("
ææ*
ΩΩ2≠{≈{8@2aassert_metrics_publishedassert_metrics_published("
√√*
¬¬2–|Ë|8@2Åstealth_email_host_name:author: "42+username@#{ GitHub.stealth_email_host_name }","
≈(≈?*
ƒ'ƒ>2≠}ƒ}8@2pGitHub:author: "42+username@#{ GitHub.stealth_email_host_name }","
≈!≈'*
ƒ ƒ&2¶}¨}8@2ègenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
……*
»»2è~ü~8@2ädefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
…J…U*
»I»T2 ~’~8@2â
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
…?…I*
»>»H2ø~…~8@2Ptesttest "ignores co-authors" do"
ÃÃ	*
ÀÀ2‰~Ë~8@2dcreate.user_a = create(:user, email: "a@example.org")"
ÕÕ*
ÃÃ2êñ8@2dcreate.user_b = create(:user, email: "b@example.org")"
ŒŒ*
ÕÕ2≈À8@2kfreeze4Timecop.freeze(Time.parse("2019-03-22 12:00:00")) do"
––*
œœ2˙ÄÄ8@2kparse4Timecop.freeze(Time.parse("2019-03-22 12:00:00")) do"
–– *
œœ2ÜÄãÄ8@2jTime4Timecop.freeze(Time.parse("2019-03-22 12:00:00")) do"
––*
œœ2ÅÄÖÄ8@2U
repositoryrepo = @status.repository"
——"*
––!2æÄ»Ä8@2Àappend_commitãrepo.default_branch_ref.append_commit({ author: user_a, message: "Pairing 1\n\nCo-authored-by: B <b@example.org>" }, repo.owner) do |files|"
“!“.*
— —-2ÈÄˆÄ8@2«ownerãrepo.default_branch_ref.append_commit({ author: user_a, message: "Pairing 1\n\nCo-authored-by: B <b@example.org>" }, repo.owner) do |files|"
“É“à*
—Ç—á2ÀÅ–Å8@2Xadd#files.add "pairing.txt", "line 1\n""
””*
““2ÌÅÅ8@2–default_branch_refãrepo.default_branch_ref.append_commit({ author: user_a, message: "Pairing 1\n\nCo-authored-by: B <b@example.org>" }, repo.owner) do |files|"
““ *
——2÷ÄËÄ8@2Àappend_commitãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 2\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
’!’.*
‘ ‘-2∑ÇƒÇ8@2«ownerãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 2\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
’É’à*
‘Ç‘á2ôÉûÉ8@2^add)files.add "pairing.txt", "line 1\nline 2""
÷÷*
’’2ªÉæÉ8@2–default_branch_refãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 2\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
’’ *
‘‘2§Ç∂Ç8@2Àappend_commitãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 3\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
ÿ!ÿ.*
◊ ◊-2ãÑòÑ8@2«ownerãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 3\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
ÿÉÿà*
◊Ç◊á2ÌÑÚÑ8@2^add)files.add "pairing.txt", "line 1\nline 3""
ŸŸ*
ÿÿ2èÖíÖ8@2–default_branch_refãrepo.default_branch_ref.append_commit({ author: user_b, message: "Pairing 3\n\nCo-authored-by: A <a@example.org>" }, repo.owner) do |files|"
ÿÿ *
◊◊2¯ÉäÑ8@2kTimecop4Timecop.freeze(Time.parse("2019-03-22 12:00:00")) do"
––*
œœ2Ú˘8@2SstubsEventer::Event.stubs(:track)"
››*
‹‹2ﬂÖ‰Ö8@2SEventEventer::Event.stubs(:track)"
››*
‹‹2–ÖﬁÖ8@2UEventerEventer::Event.stubs(:track)"
››*
‹‹2–Ö◊Ö8@2cassert_metrics_publishedassert_metrics_published("
ﬁﬁ*
››2ÛÖãÜ8@2cassert_metrics_publishedassert_metrics_published("
‰‰*
„„2àá†á8@2ëgenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ÍÍ*
ÈÈ2•àµà8@2ådefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ÍJÍU*
ÈIÈT2‡àÎà8@2ã
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
Í?ÍI*
È>ÈH2’àﬂà8@2ÉtestMtest "ignores deltas occuring before the first week after the linux epoch" do"
ÌÌ	*
ÏÏ2˙à˛à8@2ÉreturnsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ÔHÔO*
ÓGÓN2æä≈ä8@2ÉexpectsJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ÔÔ%*
ÓÓ$2îäõä8@2rpcJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ÔÔ*
ÓÓ2êäìä8@2Ü
repositoryJ@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).returns(["
ÔÔ*
ÓÓ2Öäèä8@2înever]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆ_ˆd*
ı^ıc2Œé”é8@2ìwith]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆ&ˆ**
ı%ı)2ïéôé8@2óanything]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆ+ˆ3*
ı*ı22öé¢é8@2ò	has_entry]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆ5ˆ>*
ı4ı=2§é≠é8@2ñexpects]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆˆ*
ıı2Öéåé8@2îEvent]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆˆ*
ıı2ˆçÑé8@2ñEventer]Eventer::Event.expects(:track).with(anything, has_entry(:tag, "pre-epoch@example.org")).never"
ˆˆ*
ıı2ˆç˝ç8@2ΩtimesÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜`˜e*
ˆ_ˆd2≥è∏è8@2ºwithÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜&˜**
ˆ%ˆ)2˘é˝é8@2¿anythingÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜+˜3*
ˆ*ˆ22˛éÜè8@2¡	has_entryÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜5˜>*
ˆ4ˆ=2àèëè8@2øexpectsÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜˜*
ˆˆ2Èéé8@2ΩEventÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜˜*
ˆˆ2⁄éËé8@2øEventerÖEventer::Event.expects(:track).with(anything, has_entry(:tag, "post-epoch@example.org")).times(6) # 2 x commits, additions, deletions"
˜˜*
ˆˆ2⁄é·é8@2çonceWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯Z¯^*
˜Y˜]2πêΩê8@2çwithWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯&¯**
˜%˜)2Öêâê8@2êINDEXEDWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯+¯N*
˜*˜M2äê≠ê8@2êEventerWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯+¯E*
˜*˜D2äê§ê8@2í	RepoGraphWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯+¯<*
˜*˜;2äêõê8@2èGitHubWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯+¯1*
˜*˜02äêêê8@2ëanythingWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯P¯X*
˜O˜W2Øê∑ê8@2êexpectsWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯¯*
˜˜2ıè¸è8@2éEventWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯¯*
˜˜2ÊèÙè8@2êEventerWEventer::Event.expects(:track).with(GitHub::RepoGraph::Eventer::INDEXED, anything).once"
¯¯*
˜˜2ÊèÌè8@2ëgenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
˙˙*
˘˘2Õê›ê8@2ådefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
˙J˙U*
˘I˘T2àëìë8@2ã
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
˙?˙I*
˘>˘H2˝êáë8@2xtestBtest "clears all existing metrics when generating from scratch" do"
˝˝	*
¸¸2¢ë¶ë8@2¿withâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛0˛4*
˝/˝32îíòí8@2≈	ADDITIONSâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛A˛f*
˝@˝e2•í í8@2√EventerâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛A˛[*
˝@˝Z2•íøí8@2≈	RepoGraphâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛A˛R*
˝@˝Q2•í∂í8@2¬GitHubâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛A˛G*
˝@˝F2•í´í8@2»
repositoryâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛w˛Å*
˝v˝Ä2€íÂí8@2√expectsâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛˛*
˝˝2˙ëÅí8@2¡EventâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛˛*
˝˝2Îë˘ë8@2√EventerâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::ADDITIONS, owner: @status.repository, async: false)"
˛˛*
˝˝2ÎëÚë8@2¿withâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇ0ˇ4*
˛/˛32§ì®ì8@2≈	DELETIONSâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇAˇf*
˛@˛e2µì⁄ì8@2√EventerâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇAˇ[*
˛@˛Z2µìœì8@2≈	RepoGraphâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇAˇR*
˛@˛Q2µì∆ì8@2¬GitHubâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇAˇG*
˛@˛F2µìªì8@2»
repositoryâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇwˇÅ*
˛v˛Ä2Îìıì8@2√expectsâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇˇ*
˛˛2äìëì8@2¡EventâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇˇ*
˛˛2˚íâì8@2√EventerâEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::DELETIONS, owner: @status.repository, async: false)"
ˇˇ*
˛˛2˚íÇì8@2æwitháEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
Ä0Ä4*
ˇ/ˇ32¥î∏î8@2¡COMMITSáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄAÄd*
ˇ@ˇc2≈îËî8@2¡EventeráEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄAÄ[*
ˇ@ˇZ2≈îﬂî8@2√	RepoGrapháEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄAÄR*
ˇ@ˇQ2≈î÷î8@2¿GitHubáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄAÄG*
ˇ@ˇF2≈îÀî8@2ƒ
repositoryáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄuÄ*
ˇtˇ~2˘îÉï8@2¡expectsáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄÄ*
ˇˇ2öî°î8@2øEventáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄÄ*
ˇˇ2ãîôî8@2¡EventeráEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::COMMITS, owner: @status.repository, async: false)"
ÄÄ*
ˇˇ2ãîíî8@2æwitháEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
Å0Å4*
Ä/Ä32¬ï∆ï8@2¡INDEXEDáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅAÅd*
Ä@Äc2”ïˆï8@2¡EventeráEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅAÅ[*
Ä@ÄZ2”ïÌï8@2√	RepoGrapháEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅAÅR*
Ä@ÄQ2”ï‰ï8@2¿GitHubáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅAÅG*
Ä@ÄF2”ïŸï8@2ƒ
repositoryáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅuÅ*
ÄtÄ~2áñëñ8@2¡expectsáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅÅ*
ÄÄ2®ïØï8@2øEventáEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅÅ*
ÄÄ2ôïßï8@2¡EventeráEventer::Event.expects(:delete_counters).with(event_name: GitHub::RepoGraph::Eventer::INDEXED, owner: @status.repository, async: false)"
ÅÅ*
ÄÄ2ôï†ï8@2ëgenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ÑÑ*
ÉÉ2±ñ¡ñ8@2ådefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ÑJÑU*
ÉIÉT2Ïñ˜ñ8@2ã
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
Ñ?ÑI*
É>ÉH2·ñÎñ8@2ÅtestKtest "does NOT clear existing metrics when generating from last indexed" do"
áá	*
ÜÜ2Üóäó8@2enever.Eventer::Event.expects(:delete_counters).never"
à0à5*
á/á42ÅòÜò8@2gexpects.Eventer::Event.expects(:delete_counters).never"
àà*
áá2ÁóÓó8@2eEvent.Eventer::Event.expects(:delete_counters).never"
àà*
áá2ÿóÊó8@2gEventer.Eventer::Event.expects(:delete_counters).never"
àà*
áá2ÿóﬂó8@2πgenerate_metricsw@status.generate_metrics(from_oid:  "2c6363c328126bdee83e9f8dd55ad1db3a2aa160", to_oid: @status.repository.default_oid)"
ää*
ââ2ñò¶ò8@2¥default_oidw@status.generate_metrics(from_oid:  "2c6363c328126bdee83e9f8dd55ad1db3a2aa160", to_oid: @status.repository.default_oid)"
ärä}*
âqâ|2˘òÑô8@2≥
repositoryw@status.generate_metrics(from_oid:  "2c6363c328126bdee83e9f8dd55ad1db3a2aa160", to_oid: @status.repository.default_oid)"
ägäq*
âfâp2Óò¯ò8@2ÄtestJtest "re-generates metrics from scratch if previous OID does not exist" do"
çç	*
åå2ìôóô8@2kwith5@status.expects(:update!).with(last_indexed_oid: nil)"
é!é%*
ç ç$2˛ôÇö8@2nexpects5@status.expects(:update!).with(last_indexed_oid: nil)"
éé*
çç2ÏôÛô8@2›raises†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èäèê*
éâéè2£õ©õ8@2‰ObjectMissing†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èëè¶*
éêé•2™õøõ8@2›GitRPC†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èëèó*
éêéñ2™õ∞õ8@2◊with†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èHèL*
éGéK2·öÂö8@2‡default_oid†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
è}èà*
é|éá2ñõ°õ8@2›
repository†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èrè|*
éqé{2ãõïõ8@2⁄expects†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èè%*
éé$2∑öæö8@2÷rpc†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èè*
éé2≥ö∂ö8@2›
repository†@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: "CAFE"*10, to_oid: @status.repository.default_oid).raises(GitRPC::ObjectMissing)"
èè*
éé2®ö≤ö8@2∆returnsà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êÑêã*
èÉèä2ƒúÀú8@2øwithà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êHêL*
èGèK2àúåú8@2»default_oidà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êwêÇ*
èvèÅ2∑ú¬ú8@2≈
repositoryà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êlêv*
èkèu2¨ú∂ú8@2¬expectsà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êê%*
èè$2ﬁõÂõ8@2ærpcà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êê*
èè2⁄õ›õ8@2≈
repositoryà@status.repository.rpc.expects(:gh_graph_data_by_day_and_author).with(from_oid: nil, to_oid: @status.repository.default_oid).returns([])"
êê*
èè2œõŸõ8@2ògenerate_metricsV@status.generate_metrics(from_oid:  "CAFE"*10, to_oid: @status.repository.default_oid)"
íí*
ëë2ﬂúÔú8@2ìdefault_oidV@status.generate_metrics(from_oid:  "CAFE"*10, to_oid: @status.repository.default_oid)"
íQí\*
ëPë[2°ù¨ù8@2í
repositoryV@status.generate_metrics(from_oid:  "CAFE"*10, to_oid: @status.repository.default_oid)"
íFíP*
ëEëO2ñù†ù8@2Ztest$test "publishes an indexed event" do"
ïï	*
îî2ªùøù8@2SstubsEventer::Event.stubs(:track)"
ññ*
ïï2ıù˙ù8@2SEventEventer::Event.stubs(:track)"
ññ*
ïï2ÊùÙù8@2UEventerEventer::Event.stubs(:track)"
ññ*
ïï2ÊùÌù8@2Zwith$Eventer::Event.expects(:track).with("
ó&ó**
ñ%ñ)2®û¨û8@2]INDEXED$GitHub::RepoGraph::Eventer::INDEXED,"
ò	ò,*
óó+2∂ûŸû8@2]Eventer$GitHub::RepoGraph::Eventer::INDEXED,"
ò	ò#*
óó"2∂û–û8@2_	RepoGraph$GitHub::RepoGraph::Eventer::INDEXED,"
ò	ò*
óó2∂û«û8@2\GitHub$GitHub::RepoGraph::Eventer::INDEXED,"
ò	ò*
óó2∂ûºû8@2V
repositoryowner: @status.repository,"
ôô"*
òò!2Úû¸û8@2adefault_oid$tag: @status.repository.default_oid,"
ö!ö,*
ô ô+2ûü©ü8@2`
repository$tag: @status.repository.default_oid,"
öö *
ôô2ìüùü8@2]expects$Eventer::Event.expects(:track).with("
óó*
ññ2òûüû8@2[Event$Eventer::Event.expects(:track).with("
óó*
ññ2âûóû8@2]Eventer$Eventer::Event.expects(:track).with("
óó*
ññ2âûêû8@2ëgenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ûû*
ùù2ÿüËü8@2ådefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
ûJûU*
ùIùT2ì†û†8@2ã
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
û?ûI*
ù>ùH2à†í†8@2btest,test "tracks the last indexed commit OID" do"
°°	*
††2≠†±†8@2_
assert_nil#assert_nil @status.last_indexed_oid"
¢¢*
°°2‡†Í†8@2elast_indexed_oid#assert_nil @status.last_indexed_oid"
¢¢**
°°)2Û†É°8@2ëgenerate_metricsO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
§§*
££2ì°£°8@2ådefault_oidO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
§J§U*
£I£T2Œ°Ÿ°8@2ã
repositoryO@status.generate_metrics(from_oid: nil, to_oid: @status.repository.default_oid)"
§?§I*
£>£H2√°Õ°8@2Éassert_equalEassert_equal @status.repository.default_oid, @status.last_indexed_oid"
¶¶*
••2‚°Ó°8@2Çdefault_oidEassert_equal @status.repository.default_oid, @status.last_indexed_oid"
¶'¶2*
•&•12Ç¢ç¢8@2Å
repositoryEassert_equal @status.repository.default_oid, @status.last_indexed_oid"
¶¶&*
••%2˜°Å¢8@2álast_indexed_oidEassert_equal @status.repository.default_oid, @status.last_indexed_oid"
¶<¶L*
•;•K2ó¢ß¢8@2^context%context "#update_top_contributors" do"
™™
*
©©	2π¢¿¢8@2mtest7test "saves the top contributors for the repository" do"
´´	*
™™2„¢Á¢8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
¨¨*
´´2¶£¨£8@2icreate1octo = create(:user, email: "octocat@github.com")"
≠≠*
¨¨2‹£‚£8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
ØØ3*
ÆÆ22¢§∫§8@2]assert%assert @contributor_status.persisted?"
±±*
∞∞2¬§»§8@2a
persisted?%assert @contributor_status.persisted?"
±"±,*
∞!∞+2›§Á§8@2Öassert_emptyGassert_empty @contributor_status.top_contributor_ids - [sr.id, octo.id]"
≤≤*
±±2Ó§˙§8@2åtop_contributor_idsGassert_empty @contributor_status.top_contributor_ids - [sr.id, octo.id]"
≤(≤;*
±'±:2è•¢•8@2{idGassert_empty @contributor_status.top_contributor_ids - [sr.id, octo.id]"
≤B≤D*
±A±C2©•´•8@2{idGassert_empty @contributor_status.top_contributor_ids - [sr.id, octo.id]"
≤K≤M*
±J±L2≤•¥•8@2btest,test "ignores merge commit contributions" do"
ΩΩ	*
ºº2é®í®8@2pcreate8status = create(:contribution_graph_status, :git_backed,"
ææ*
ΩΩ2 ®–®8@2sutc>repo_fixture: :empty, last_viewed_at: Time.utc(2012, 1, 1, 13)"
ø4ø7*
æ3æ62≠©∞©8@2tTime>repo_fixture: :empty, last_viewed_at: Time.utc(2012, 1, 1, 13)"
ø/ø3*
æ.æ22®©¨©8@2T
repositoryrepo = status.repository"
¡¡*
¿¿2›©Á©8@2hcreate0user1 = create(:user, email: "user1@github.com")"
¬¬*
¡¡2ˆ©¸©8@2hcreate0user2 = create(:user, email: "user2@github.com")"
√√*
¬¬2≠™≥™8@2öcreatebroot = repo.commits.create({ message: "root", author: user1 }) { |files| files.add("foo", "bar") }"
≈≈!*
ƒƒ 2Ò™˜™8@2óaddbroot = repo.commits.create({ message: "root", author: user1 }) { |files| files.add("foo", "bar") }"
≈V≈Y*
ƒUƒX2¨´Ø´8@2õcommitsbroot = repo.commits.create({ message: "root", author: user1 }) { |files| files.add("foo", "bar") }"
≈≈*
ƒƒ2È™™8@2°createic1 = repo.commits.create({ message: "C1", author: user1 }, root.oid) { |files| files.add("foo2", "bar") }"
∆∆*
≈≈2ÿ´ﬁ´8@2ûoidic1 = repo.commits.create({ message: "C1", author: user1 }, root.oid) { |files| files.add("foo2", "bar") }"
∆G∆J*
≈F≈I2Ü¨â¨8@2ûaddic1 = repo.commits.create({ message: "C1", author: user1 }, root.oid) { |files| files.add("foo2", "bar") }"
∆\∆_*
≈[≈^2õ¨û¨8@2¢commitsic1 = repo.commits.create({ message: "C1", author: user1 }, root.oid) { |files| files.add("foo2", "bar") }"
∆∆*
≈≈2–´◊´8@2°createit1 = repo.commits.create({ message: "T1", author: user2 }, root.oid) { |files| files.add("foo3", "bar") }"
««*
∆∆2»¨Œ¨8@2ûoidit1 = repo.commits.create({ message: "T1", author: user2 }, root.oid) { |files| files.add("foo3", "bar") }"
«G«J*
∆F∆I2ˆ¨˘¨8@2ûaddit1 = repo.commits.create({ message: "T1", author: user2 }, root.oid) { |files| files.add("foo3", "bar") }"
«\«_*
∆[∆^2ã≠é≠8@2¢commitsit1 = repo.commits.create({ message: "T1", author: user2 }, root.oid) { |files| files.add("foo3", "bar") }"
««*
∆∆2¿¨«¨8@2yfirstBt2 = repo.commits.create_merge_commit(user2, c1.oid, t1.oid).first"
»D»I*
«C«H2„≠Ë≠8@2ácreate_merge_commitBt2 = repo.commits.create_merge_commit(user2, c1.oid, t1.oid).first"
»»,*
««+2∏≠À≠8@2woidBt2 = repo.commits.create_merge_commit(user2, c1.oid, t1.oid).first"
»7»:*
«6«92÷≠Ÿ≠8@2woidBt2 = repo.commits.create_merge_commit(user2, c1.oid, t1.oid).first"
»?»B*
«>«A2ﬁ≠·≠8@2{commitsBt2 = repo.commits.create_merge_commit(user2, c1.oid, t1.oid).first"
»»*
««2∞≠∑≠8@2yfirstBc2 = repo.commits.create_merge_commit(user2, c1.oid, t2.oid).first"
…D…I*
»C»H2¨Æ±Æ8@2ácreate_merge_commitBc2 = repo.commits.create_merge_commit(user2, c1.oid, t2.oid).first"
……,*
»»+2ÅÆîÆ8@2woidBc2 = repo.commits.create_merge_commit(user2, c1.oid, t2.oid).first"
…7…:*
»6»92üÆ¢Æ8@2woidBc2 = repo.commits.create_merge_commit(user2, c1.oid, t2.oid).first"
…?…B*
»>»A2ßÆ™Æ8@2{commitsBc2 = repo.commits.create_merge_commit(user2, c1.oid, t2.oid).first"
……*
»»2˘≠ÄÆ8@2^create&repo.heads.create("master", c2, user2)"
ÀÀ*
  2ƒÆ Æ8@2]heads&repo.heads.create("master", c2, user2)"
ÀÀ*
  2æÆ√Æ8@2iupdate_top_contributors!status.update_top_contributors!"
ÕÕ&*
ÃÃ%2ÓÆÜØ8@2{assert_equal=assert_equal [user1.id, user2.id], status.top_contributor_ids"
œœ*
ŒŒ2éØöØ8@2qid=assert_equal [user1.id, user2.id], status.top_contributor_ids"
œœ*
ŒŒ2¢Ø§Ø8@2qid=assert_equal [user1.id, user2.id], status.top_contributor_ids"
œ%œ'*
Œ$Œ&2¨ØÆØ8@2Çtop_contributor_ids=assert_equal [user1.id, user2.id], status.top_contributor_ids"
œ1œD*
Œ0ŒC2∏ØÀØ8@2ptest:test "limits to the TOP_CONTRIBUTOR_COUNT contributors" do"
““	*
——2ŸØ›Ø8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
””*
““2ü∞•∞8@2icreate1octo = create(:user, email: "octocat@github.com")"
‘‘*
””2’∞€∞8@2à
stub_constLRepository::ContributionGraphStatus.stub_const(:TOP_CONTRIBUTOR_COUNT, 1) do"
÷+÷5*
’*’42´±µ±8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
◊◊5*
÷÷42±à≤8@2ïContributionGraphStatusLRepository::ContributionGraphStatus.stub_const(:TOP_CONTRIBUTOR_COUNT, 1) do"
÷÷**
’’)2á±™±8@2à
RepositoryLRepository::ContributionGraphStatus.stub_const(:TOP_CONTRIBUTOR_COUNT, 1) do"
÷÷*
’’2á±ë±8@2}assert_equal?assert_equal @contributor_status.top_contributor_ids, [octo.id]"
⁄⁄*
ŸŸ2ö≤¶≤8@2Ñtop_contributor_ids?assert_equal @contributor_status.top_contributor_ids, [octo.id]"
⁄(⁄;*
Ÿ'Ÿ:2ª≤Œ≤8@2sid?assert_equal @contributor_status.top_contributor_ids, [octo.id]"
⁄C⁄E*
ŸBŸD2÷≤ÿ≤8@2jtest4test "excludes users blocked by the repo's owner" do"
››	*
‹‹2Á≤Î≤8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
ﬁﬁ*
››2ß≥≠≥8@2icreate1octo = create(:user, email: "octocat@github.com")"
ﬂﬂ*
ﬁﬁ2›≥„≥8@2gblock0@contributor_status.repository.owner.block(octo)"
·,·1*
‡+‡02¥¥π¥8@2gowner0@contributor_status.repository.owner.block(octo)"
·&·+*
‡%‡*2Æ¥≥¥8@2l
repository0@contributor_status.repository.owner.block(octo)"
··%*
‡‡$2£¥≠¥8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
‚‚3*
··22⁄¥Ú¥8@2{assert_equal=assert_equal [sr.id], @contributor_status.top_contributor_ids"
‰‰*
„„2˙¥Üµ8@2qid=assert_equal [sr.id], @contributor_status.top_contributor_ids"
‰‰*
„„2ãµçµ8@2Çtop_contributor_ids=assert_equal [sr.id], @contributor_status.top_contributor_ids"
‰1‰D*
„0„C2§µ∑µ8@2Utesttest "excludes spammy users" do"
ÁÁ	*
ÊÊ2≈µ…µ8@2bskip,skip unless GitHub.spamminess_check_enabled?"
ËË*
ÁÁ
2ÎµÔµ8@2wspamminess_check_enabled?,skip unless GitHub.spamminess_check_enabled?"
ËË3*
ÁÁ22˛µó∂8@2dGitHub,skip unless GitHub.spamminess_check_enabled?"
ËË*
ÁÁ2˜µ˝µ8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
ÈÈ*
ËË2£∂©∂8@2icreate1octo = create(:user, email: "octocat@github.com")"
ÍÍ*
ÈÈ2Ÿ∂ﬂ∂8@2Smark_as_spammyocto.mark_as_spammy"
ÏÏ*
ÎÎ2ê∑û∑8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
ÌÌ3*
ÏÏ22π∑—∑8@2{assert_equal=assert_equal [sr.id], @contributor_status.top_contributor_ids"
ÔÔ*
ÓÓ2Ÿ∑Â∑8@2qid=assert_equal [sr.id], @contributor_status.top_contributor_ids"
ÔÔ*
ÓÓ2Í∑Ï∑8@2Çtop_contributor_ids=assert_equal [sr.id], @contributor_status.top_contributor_ids"
Ô1ÔD*
Ó0ÓC2É∏ñ∏8@2dtest.test "reports shortlog failures to failbot" do"
ÚÚ	*
ÒÒ2§∏®∏8@2áraisesOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
Û;ÛA*
Ú:Ú@2çπìπ8@2ÑnewOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛRÛU*
ÚQÚT2§πßπ8@2àTimeoutOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛBÛQ*
ÚAÚP2îπ£π8@2áGitRPCOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛBÛH*
ÚAÚG2îπöπ8@2ÜstubsOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
Û#Û(*
Ú"Ú'2ı∏˙∏8@2çany_instanceOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛÛ"*
ÚÚ!2Ë∏Ù∏8@2áClientOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛÛ*
ÚÚ2Ÿ∏Á∏8@2áGitRPCOGitRPC::Client.any_instance.stubs(:contributor_log).raises(GitRPC::Timeout.new)"
ÛÛ*
ÚÚ2Ÿ∏ﬂ∏8@2SonceFailbot.expects(:report).once"
Ù Ù$*
ÛÛ#2»πÃπ8@2VexpectsFailbot.expects(:report).once"
ÙÙ*
ÛÛ2∑πæπ8@2VFailbotFailbot.expects(:report).once"
ÙÙ*
ÛÛ2Øπ∂π8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
ˆˆ3*
ıı22ËπÄ∫8@2Qcontextcontext "#top_emails" do"
˙˙
*
˘˘	2í∫ô∫8@2ÇtestLtest "returns an array of known email addresses for the top contributors" do"
˚˚	*
˙˙2Ø∫≥∫8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
¸¸*
˚˚2áªçª8@2icreate1octo = create(:user, email: "octocat@github.com")"
˝˝*
¸¸2Ωª√ª8@2itap4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
ˇ/ˇ2*
˛.˛12óºöº8@2inew4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
ˇ'ˇ**
˛&˛)2èºíº8@2rStealthEmail4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
ˇˇ&*
˛˛%2Çºéº8@2mtap8octo_stealth_email = StealthEmail.new(octo).tap(&:save!)"
Ä3Ä6*
ˇ2ˇ52÷ºŸº8@2mnew8octo_stealth_email = StealthEmail.new(octo).tap(&:save!)"
Ä)Ä,*
ˇ(ˇ+2Ãºœº8@2vStealthEmail8octo_stealth_email = StealthEmail.new(octo).tap(&:save!)"
ÄÄ(*
ˇˇ'2øºÀº8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
ÇÇ3*
ÅÅ22˛ºñΩ8@2Éassert_includesBassert_includes @contributor_status.top_emails, "simon@rozet.name""
ÑÑ*
ÉÉ2ûΩ≠Ω8@2~
top_emailsBassert_includes @contributor_status.top_emails, "simon@rozet.name""
Ñ+Ñ5*
É*É42¬ΩÃΩ8@2áassert_includesFassert_includes @contributor_status.top_emails, sr_stealth_email.email"
ÖÖ*
ÑÑ2ÁΩˆΩ8@2Ç
top_emailsFassert_includes @contributor_status.top_emails, sr_stealth_email.email"
Ö+Ö5*
Ñ*Ñ42ãæïæ8@2}emailFassert_includes @contributor_status.top_emails, sr_stealth_email.email"
ÖHÖM*
ÑGÑL2®æ≠æ8@2éassert_includesMassert_includes @contributor_status.top_emails, sr_stealth_email.legacy_email"
ÜÜ*
ÖÖ2¥æ√æ8@2â
top_emailsMassert_includes @contributor_status.top_emails, sr_stealth_email.legacy_email"
Ü+Ü5*
Ö*Ö42ÿæ‚æ8@2ãlegacy_emailMassert_includes @contributor_status.top_emails, sr_stealth_email.legacy_email"
ÜHÜT*
ÖGÖS2ıæÅø8@2Öassert_includesDassert_includes @contributor_status.top_emails, "octocat@github.com""
áá*
ÜÜ2àøóø8@2Ä
top_emailsDassert_includes @contributor_status.top_emails, "octocat@github.com""
á+á5*
Ü*Ü42¨ø∂ø8@2âassert_includesHassert_includes @contributor_status.top_emails, octo_stealth_email.email"
àà*
áá2”ø‚ø8@2Ñ
top_emailsHassert_includes @contributor_status.top_emails, octo_stealth_email.email"
à+à5*
á*á42˜øÅ¿8@2emailHassert_includes @contributor_status.top_emails, octo_stealth_email.email"
àJàO*
áIáN2ñ¿õ¿8@2êassert_includesOassert_includes @contributor_status.top_emails, octo_stealth_email.legacy_email"
ââ*
àà2¢¿±¿8@2ã
top_emailsOassert_includes @contributor_status.top_emails, octo_stealth_email.legacy_email"
â+â5*
à*à42∆¿–¿8@2çlegacy_emailOassert_includes @contributor_status.top_emails, octo_stealth_email.legacy_email"
âJâV*
àIàU2Â¿Ò¿8@2|testFtest "includes a normalized version of their stealth email address" do"
åå	*
ãã2ˇ¿É¡8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
çç*
åå2—¡◊¡8@2itap4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
é/é2*
ç.ç12®¬´¬8@2inew4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
é'é**
ç&ç)2†¬£¬8@2rStealthEmail4sr_stealth_email = StealthEmail.new(sr).tap(&:save!)"
éé&*
çç%2ì¬ü¬8@2vupdate_top_contributors!,@contributor_status.update_top_contributors!"
êê3*
èè22–¬Ë¬8@2¶assert_includeseassert_includes @contributor_status.top_emails, "#{sr.id}+username@#{GitHub.stealth_email_host_name}""
íí*
ëë2¬ˇ¬8@2°
top_emailseassert_includes @contributor_status.top_emails, "#{sr.id}+username@#{GitHub.stealth_email_host_name}""
í+í5*
ë*ë42î√û√8@2ôideassert_includes @contributor_status.top_emails, "#{sr.id}+username@#{GitHub.stealth_email_host_name}""
í=í?*
ë<ë>2¶√®√8@2Æstealth_email_host_nameeassert_includes @contributor_status.top_emails, "#{sr.id}+username@#{GitHub.stealth_email_host_name}""
íSíj*
ëRëi2º√”√8@2ùGitHubeassert_includes @contributor_status.top_emails, "#{sr.id}+username@#{GitHub.stealth_email_host_name}""
íLíR*
ëKëQ2µ√ª√8@2Zcontext!context "#data_fully_indexed?" do"
ññ
*
ïï	2Á√Ó√8@2ptest:test "returns false if the data has never been indexed" do"
óó	*
ññ2çƒëƒ8@2nrefute_predicate,refute_predicate @status, :last_indexed_oid?"
òò*
óó2Œƒﬁƒ8@2prefute_predicate.refute_predicate @status, :data_fully_indexed?"
ôô*
òò2Å≈ë≈8@2rtest<test "returns false if it doesn't have the indexed event" do"
úú	*
õõ2Ω≈¡≈8@2ÖreturnsLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ùEùL*
úDúK2æ∆≈∆8@2ÖexpectsLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ù/ù6*
ú.ú52®∆Ø∆8@2äany_instanceLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ù"ù.*
ú!ú-2õ∆ß∆8@2ÖEventerLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ùù!*
úú 2Ä∆ö∆8@2á	RepoGraphLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ùù*
úú2Ä∆ë∆8@2ÑGitHubLGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(false)"
ùù*
úú2Ä∆Ü∆8@2yupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
ûû*
ùù2€∆‚∆8@2}default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
û<ûG*
ù;ùF2à«ì«8@2|
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
û1û;*
ù0ù:2˝∆á«8@2prefute_predicate.refute_predicate @status, :data_fully_indexed?"
üü*
ûû2ö«™«8@2htest2test "returns true if it has the indexed event" do"
¢¢	*
°°2÷«⁄«8@2ÑreturnsKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
£E£L*
¢D¢K2Õ»‘»8@2ÑexpectsKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
£/£6*
¢.¢52∑»æ»8@2âany_instanceKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
£"£.*
¢!¢-2™»∂»8@2ÑEventerKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
££!*
¢¢ 2è»©»8@2Ü	RepoGraphKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
££*
¢¢2è»†»8@2ÉGitHubKGitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).returns(true)"
££*
¢¢2è»ï»8@2yupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
§§*
££2È»»8@2}default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
§<§G*
£;£F2ñ…°…8@2|
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
§1§;*
£0£:2ã…ï…8@2passert_predicate.assert_predicate @status, :data_fully_indexed?"
••*
§§2®…∏…8@2Xcontextcontext "#serve_stale_data?" do"
©©
*
®®	2Ë…Ô…8@2gtest1test "is false if data has never been indexed" do"
™™	*
©©2å ê 8@2_
assert_nil#assert_nil @status.last_indexed_oid"
´´*
™™2ƒ Œ 8@2elast_indexed_oid#assert_nil @status.last_indexed_oid"
´´**
™™)2◊ Á 8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
¨¨*
´´2Ó ˛ 8@2_test)test "is false if data_fully_indexed?" do"
ØØ	*
ÆÆ2®À¨À8@2yupdate!@@status.update! last_indexed_oid: @status.repository.default_oid"
∞∞*
ØØ2‡ÀÁÀ8@2}default_oid@@status.update! last_indexed_oid: @status.repository.default_oid"
∞<∞G*
Ø;ØF2çÃòÃ8@2|
repository@@status.update! last_indexed_oid: @status.repository.default_oid"
∞1∞;*
Ø0Ø:2ÇÃåÃ8@2cexpects*@status.expects(data_fully_indexed?: true)"
±±*
∞∞2ßÃÆÃ8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
≤≤*
±±2–Ã‡Ã8@2ëtest[test "true when eventer is lagging and current, and Eventer has previously indexed data" do"
µµ	*
¥¥2äÕéÕ8@2äreturnsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂K∂R*
µJµQ2∞Œ∑Œ8@2äexpectsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂/∂6*
µ.µ52îŒõŒ8@2èany_instanceQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂"∂.*
µ!µ-2áŒìŒ8@2äEventerQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂∂!*
µµ 2ÏÕÜŒ8@2å	RepoGraphQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂∂*
µµ2ÏÕ˝Õ8@2âGitHubQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
∂∂*
µµ2ÏÕÚÕ8@2{returnsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
∑;∑B*
∂:∂A2¯ŒˇŒ8@2Åat_least_onceB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
∑-∑:*
∂,∂92ÍŒ˜Œ8@2{expectsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
∑∑*
∂∂2ÃŒ”Œ8@2fcreate.job_status = JobStatus.create state: "success""
∏∏$*
∑∑#2§œ™œ8@2i	JobStatus.job_status = JobStatus.create state: "success""
∏∏*
∑∑2öœ£œ8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
ππ*
∏∏2’œÿœ8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
ππ*
∏∏2–œ‘œ8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
π π`*
∏∏_2€œõ–8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
π πC*
∏∏B2€œ˛œ8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
π π**
∏∏)2€œÂœ8@2ûminuteseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
πeπl*
∏d∏k2†–ß–8@2µupdate!|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
∫∫*
ππ2∂–Ω–8@2πdefault_oid|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
∫<∫G*
π;πF2„–Ó–8@2∏
repository|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
∫1∫;*
π0π:2ÿ–‚–8@2∞id|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
∫c∫e*
πbπd2ä—å—8@2nassert_predicate,assert_predicate @status, :serve_stale_data?"
ºº*
ªª2≤—¬—8@2ïtest_test "false when eventer is lagging and current, and Eventer has no previously indexed data" do"
øø	*
ææ2Ï——8@2ãreturnsRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿K¿R*
øJøQ2ñ”ù”8@2ãexpectsRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿/¿6*
ø.ø52˙“Å”8@2êany_instanceRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿"¿.*
ø!ø-2Ì“˘“8@2ãEventerRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿¿!*
øø 2““Ï“8@2ç	RepoGraphRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿¿*
øø2““„“8@2äGitHubRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
¿¿*
øø2““ÿ“8@2{returnsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
¡;¡B*
¿:¿A2ﬂ”Ê”8@2Åat_least_onceB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
¡-¡:*
¿,¿92—”ﬁ”8@2{expectsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
¡¡*
¿¿2≥”∫”8@2fcreate.job_status = JobStatus.create state: "success""
¬¬$*
¡¡#2ã‘ë‘8@2i	JobStatus.job_status = JobStatus.create state: "success""
¬¬*
¡¡2Å‘ä‘8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√√*
¬¬2º‘ø‘8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√√*
¬¬2∑‘ª‘8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√ √`*
¬¬_2¬‘Ç’8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√ √C*
¬¬B2¬‘Â‘8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√ √**
¬¬)2¬‘Ã‘8@2ûminuteseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.minutes"
√e√l*
¬d¬k2á’é’8@2µupdate!|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ƒƒ*
√√2ù’§’8@2πdefault_oid|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ƒ<ƒG*
√;√F2 ’’’8@2∏
repository|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ƒ1ƒ;*
√0√:2ø’…’8@2∞id|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ƒcƒe*
√b√d2Ò’Û’8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
∆∆*
≈≈2ô÷©÷8@2ätestTtest "false when eventer is slightly lagging but within the acceptable threshold" do"
……	*
»»2”÷◊÷8@2{returnsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
 ; B*
…:…A2‚◊È◊8@2Åat_least_onceB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
 - :*
…,…92‘◊·◊8@2{expectsB@status.expects(:data_fully_indexed?).at_least_once.returns(false)"
  *
……2∂◊Ω◊8@2fcreate.job_status = JobStatus.create state: "success""
ÀÀ$*
  #2éÿîÿ8@2i	JobStatus.job_status = JobStatus.create state: "success""
ÀÀ*
  2Ñÿçÿ8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
ÃÃ*
ÀÀ2øÿ¬ÿ8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
ÃÃ*
ÀÀ2∫ÿæÿ8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
Ã Ã`*
ÀÀ_2≈ÿÖŸ8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
Ã ÃC*
ÀÀB2≈ÿËÿ8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
Ã Ã**
ÀÀ)2≈ÿœÿ8@2ûsecondseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 5.seconds"
ÃeÃl*
ÀdÀk2äŸëŸ8@2µupdate!|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ÕÕ*
ÃÃ2†ŸßŸ8@2πdefault_oid|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
Õ<ÕG*
Ã;ÃF2ÕŸÿŸ8@2∏
repository|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
Õ1Õ;*
Ã0Ã:2¬ŸÃŸ8@2∞id|@status.update! last_indexed_oid: @status.repository.default_oid, job_status_id: job_status.id, job_enqueued_at: enqueued_at"
ÕcÕe*
ÃbÃd2ÙŸˆŸ8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
œœ*
ŒŒ2ú⁄¨⁄8@2≠testwtest "is true when data is not current but the job has been queued too long and Eventer has previously indexed data" do"
““	*
——2÷⁄⁄⁄8@2äreturnsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
”K”R*
“J“Q2ò‹ü‹8@2äexpectsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
”/”6*
“.“52¸€É‹8@2èany_instanceQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
”"”.*
“!“-2Ô€˚€8@2äEventerQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
””!*
““ 2‘€Ó€8@2å	RepoGraphQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
””*
““2‘€Â€8@2âGitHubQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
””*
““2‘€⁄€8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘‘*
””2ø‹¬‹8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘‘*
””2∫‹æ‹8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘ ‘`*
””_2≈‹Ö›8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘ ‘C*
””B2≈‹Ë‹8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘ ‘**
””)2≈‹œ‹8@2ûsecondseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‘e‘l*
”d”k2ä›ë›8@2Ucreatejob_status = JobStatus.create"
’’$*
‘‘#2Ø›µ›8@2X	JobStatusjob_status = JobStatus.create"
’’*
‘‘2•›Æ›8@2hassert_predicate&assert_predicate job_status, :pending?"
÷÷*
’’2º›Ã›8@2Iupdate!@status.update!("
◊◊*
÷÷2Ò›¯›8@2Qidjob_status_id: job_status.id,"
Ÿ#Ÿ%*
ÿ"ÿ$2‚ﬁ‰ﬁ8@2nassert_predicate,assert_predicate @status, :serve_stale_data?"
››*
‹‹2õﬂ´ﬂ8@2Ætestxtest "is true when data is not current but the job has been running too long and Eventer has previously indexed data" do"
‡‡	*
ﬂﬂ2’ﬂŸﬂ8@2äreturnsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
·K·R*
‡J‡Q2ò·ü·8@2äexpectsQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
·/·6*
‡.‡52¸‡É·8@2èany_instanceQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
·"·.*
‡!‡-2Ô‡˚‡8@2äEventerQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
··!*
‡‡ 2‘‡Ó‡8@2å	RepoGraphQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
··*
‡‡2‘‡Â‡8@2âGitHubQGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(true)"
··*
‡‡2‘‡⁄‡8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚‚*
··2ø·¬·8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚‚*
··2∫·æ·8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚ ‚`*
··_2≈·Ö‚8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚ ‚C*
··B2≈·Ë·8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚ ‚**
··)2≈·œ·8@2ûsecondseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
‚e‚l*
·d·k2ä‚ë‚8@2fcreate.job_status = JobStatus.create state: "started""
„„$*
‚‚#2Ø‚µ‚8@2i	JobStatus.job_status = JobStatus.create state: "started""
„„*
‚‚2•‚Æ‚8@2hassert_predicate&assert_predicate job_status, :started?"
‰‰*
„„2Õ‚›‚8@2Iupdate!@status.update!("
ÂÂ*
‰‰2Ç„â„8@2Qidjob_status_id: job_status.id,"
Á#Á%*
Ê"Ê$2Û„ı„8@2nassert_predicate,assert_predicate @status, :serve_stale_data?"
ÎÎ*
ÍÍ2¨‰º‰8@2±test{test "is false when data is not current but the job has been queued too long and Eventer has NO previously indexed data" do"
ÓÓ	*
ÌÌ2Ê‰Í‰8@2ãreturnsRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
ÔKÔR*
ÓJÓQ2¨Ê≥Ê8@2ãexpectsRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
Ô/Ô6*
Ó.Ó52êÊóÊ8@2êany_instanceRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
Ô"Ô.*
Ó!Ó-2ÉÊèÊ8@2ãEventerRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
ÔÔ!*
ÓÓ 2ËÂÇÊ8@2ç	RepoGraphRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
ÔÔ*
ÓÓ2ËÂ˘Â8@2äGitHubRGitHub::RepoGraph::Eventer.any_instance.expects(:has_indexed_data?).returns(false)"
ÔÔ*
ÓÓ2ËÂÓÂ8@2önoweenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
*
ÔÔ2‘Ê◊Ê8@2õTimeeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
*
ÔÔ2œÊ”Ê8@2≤INDEXING_TOO_LONG_THRESHOLDeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
 `*
ÔÔ_2⁄ÊöÁ8@2ÆContributionGraphStatuseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
 C*
ÔÔB2⁄Ê˝Ê8@2°
Repositoryeenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
 **
ÔÔ)2⁄Ê‰Ê8@2ûsecondseenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD - 5.seconds"
el*
ÔdÔk2üÁ¶Á8@2Ucreatejob_status = JobStatus.create"
ÒÒ$*
#2ƒÁ Á8@2X	JobStatusjob_status = JobStatus.create"
ÒÒ*
2∫Á√Á8@2Iupdate!@status.update!("
ÚÚ*
ÒÒ2ŸÁ‡Á8@2Qidjob_status_id: job_status.id,"
Ù#Ù%*
Û"Û$2 ËÃË8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
¯¯*
˜˜2ÉÈìÈ8@2ètestYtest "is false when data is not current but the job has been queued only a short time" do"
˚˚	*
˙˙2ΩÈ¡È8@2õnowfenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸¸*
˚˚2∞Í≥Í8@2úTimefenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸¸*
˚˚2´ÍØÍ8@2≥INDEXING_TOO_LONG_THRESHOLDfenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸ ¸`*
˚˚_2∂ÍˆÍ8@2ØContributionGraphStatusfenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸ ¸C*
˚˚B2∂ÍŸÍ8@2¢
Repositoryfenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸ ¸**
˚˚)2∂Í¿Í8@2üsecondsfenqueued_at = Time.now - Repository::ContributionGraphStatus::INDEXING_TOO_LONG_THRESHOLD + 30.seconds"
¸f¸m*
˚e˚l2¸ÍÉÎ8@2Ucreatejob_status = JobStatus.create"
˝˝$*
¸¸#2°ÎßÎ8@2X	JobStatusjob_status = JobStatus.create"
˝˝*
¸¸2óÎ†Î8@2Iupdate!@status.update!("
˛˛*
˝˝2∂ÎΩÎ8@2Qidjob_status_id: job_status.id,"
Ä#Ä%*
ˇ"ˇ$2ßÏ©Ï8@2nrefute_predicate,refute_predicate @status, :serve_stale_data?"
ÑÑ*
ÉÉ2‡ÏÏ8@2Mcontextcontext "#ready?" do"
àà
*
áá	2ûÌ•Ì8@2îtest^test "returns false when data is not fully indexed and we're not ready to serve stale data" do"
ââ	*
àà2∑ÌªÌ8@2`stubs)@status.stubs(data_fully_indexed?: false)"
ää*
ââ2§Ó©Ó8@2^stubs'@status.stubs(serve_stale_data?: false)"
ãã*
ää2‘ÓŸÓ8@2crefute_predicate!refute_predicate @status, :ready?"
çç*
åå2˚ÓãÔ8@2gtest1test "returns true when data is fully indexed" do"
êê	*
èè2™ÔÆÔ8@2_stubs(@status.stubs(data_fully_indexed?: true)"
ëë*
êê2ÍÔÔÔ8@2cassert_predicate!assert_predicate @status, :ready?"
ìì*
íí2í¢8@2ètestYtest "returns true when data is not fully indexed but we're ready to serve stale data" do"
ññ	*
ïï2¡≈8@2`stubs)@status.stubs(data_fully_indexed?: false)"
óó*
ññ2©ÒÆÒ8@2]stubs&@status.stubs(serve_stale_data?: true)"
òò*
óó2ŸÒﬁÒ8@2cassert_predicate!assert_predicate @status, :ready?"
öö*
ôô2ˇÒèÚ8@2Vcontextcontext "#last_indexed_at" do"
ûû
*
ùù	2≤ÚπÚ8@2vtest@test "backfills to updated_at on-initialize if it wasn't set" do"
üü	*
ûû2‘ÚÿÚ8@2^freeze&Timecop.freeze(5.minutes.ago) do |now|"
††*
üü2£Û©Û8@2[ago&Timecop.freeze(5.minutes.ago) do |now|"
† †#*
üü"2¥Û∑Û8@2_minutes&Timecop.freeze(5.minutes.ago) do |now|"
††*
üü2¨Û≥Û8@2Æupdate_columnsn@status.update_columns last_indexed_oid: @status.repository.default_oid, last_indexed_at: nil, updated_at: now"
°°*
††2“Û‡Û8@2´default_oidn@status.update_columns last_indexed_oid: @status.repository.default_oid, last_indexed_at: nil, updated_at: now"
°E°P*
†D†O2ÜÙëÙ8@2™
repositoryn@status.update_columns last_indexed_oid: @status.repository.default_oid, last_indexed_at: nil, updated_at: now"
°:°D*
†9†C2˚ÛÖÙ8@2_Timecop&Timecop.freeze(5.minutes.ago) do |now|"
††*
üü2õÛ¢Û8@2Y
updated_atexpected = @status.updated_at"
§§$*
££#2›ÙÁÙ8@2ôassert_equal[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
••*
§§2ÓÙ˙Ù8@2úlast_indexed_at[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
•S•b*
§R§a2∫ı…ı8@2ëfind[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
•B•F*
§A§E2©ı≠ı8@2èid[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
•O•Q*
§N§P2∂ı∏ı8@2§ContributionGraphStatus[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
••A*
§§@2Öı®ı8@2ó
Repository[assert_equal expected, Repository::ContributionGraphStatus.find(@status.id).last_indexed_at"
••(*
§§'2Öıèı8@2Ncontextcontext "#viewed!" do"
©©
*
®®	2€ı‚ı8@2atest+test "updates the last_viewed_at column" do"
™™	*
©©2ıı˘ı8@2kfreeze3Timecop.freeze(@status.last_viewed_at + 5.hours) do"
´´*
™™2Øˆµˆ8@2slast_viewed_at3Timecop.freeze(@status.last_viewed_at + 5.hours) do"
´´,*
™™+2æˆÃˆ8@2jhours3Timecop.freeze(@status.last_viewed_at + 5.hours) do"
´1´6*
™0™52—ˆ÷ˆ8@2urefute_equal7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨	¨*
´´2„ˆÔˆ8@2mto_i7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨-¨1*
´,´02á˜ã˜8@2wlast_viewed_at7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨¨,*
´´+2¯ˆÜ˜8@2mto_i7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨<¨@*
´;´?2ñ˜ö˜8@2lnow7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨8¨;*
´7´:2í˜ï˜8@2mTime7refute_equal @status.last_viewed_at.to_i, Time.now.to_i"
¨3¨7*
´2´62ç˜ë˜8@2Hviewed!@status.viewed!"
≠≠*
¨¨2´˜≤˜8@2uassert_equal7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
Ø	Ø*
ÆÆ2º˜»˜8@2mto_i7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
Ø-Ø1*
Æ,Æ02‡˜‰˜8@2wlast_viewed_at7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
ØØ,*
ÆÆ+2—˜ﬂ˜8@2mto_i7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
Ø<Ø@*
Æ;Æ?2Ô˜Û˜8@2lnow7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
Ø8Ø;*
Æ7Æ:2Î˜Ó˜8@2mTime7assert_equal @status.last_viewed_at.to_i, Time.now.to_i"
Ø3Ø7*
Æ2Æ62Ê˜Í˜8@2lTimecop3Timecop.freeze(@status.last_viewed_at + 5.hours) do"
´´*
™™2ßˆÆˆ8@2†testjtest "doesn't update the last_viewed_at column when current time is within an hour of the stored value" do"
≥≥	*
≤≤2ã¯è¯8@2nfreeze6Timecop.freeze(@status.last_viewed_at + 15.minutes) do"
¥¥*
≥≥2Ñ˘ä˘8@2vlast_viewed_at6Timecop.freeze(@status.last_viewed_at + 15.minutes) do"
¥¥,*
≥≥+2ì˘°˘8@2ominutes6Timecop.freeze(@status.last_viewed_at + 15.minutes) do"
¥2¥9*
≥1≥82ß˘Æ˘8@2_last_viewed_atbefore = @status.last_viewed_at"
µµ(*
¥¥'2Ã˘⁄˘8@2Hviewed!@status.viewed!"
∂∂*
µµ2Î˘Ú˘8@2iassert_equal+assert_equal before, @status.last_viewed_at"
∑	∑*
∂∂2˚˘á˙8@2klast_viewed_at+assert_equal before, @status.last_viewed_at"
∑&∑4*
∂%∂32ò˙¶˙8@2oTimecop6Timecop.freeze(@status.last_viewed_at + 15.minutes) do"
¥¥*
≥≥2¸¯É˘8@2Xcontextcontext "#contributors_data" do"
ºº
*
ªª	2¬˙…˙8@2ntest8test "fetches data from Eventer if enabled and ready" do"
ΩΩ	*
ºº2Ê˙Í˙8@2a
repository%repo = @contributor_status.repository"
æ"æ,*
Ω!Ω+2¿˚ ˚8@2ecreate-sr = create(:user, email: "simon@rozet.name")"
¿¿*
øø2◊˚›˚8@2bcreate!)sr.emails.create!(email: "sr@github.com")"
¡¡*
¿¿2ê¸ó¸8@2aemails)sr.emails.create!(email: "sr@github.com")"
¡
¡*
¿	¿2â¸è¸8@2icreate1octo = create(:user, email: "octocat@github.com")"
¬¬*
¡¡2Ω¸√¸8@2top_contributor_ids:@contributor_status.top_contributor_ids = [sr.id, octo.id]"
ƒƒ.*
√√-2É˝ñ˝8@2nid:@contributor_status.top_contributor_ids = [sr.id, octo.id]"
ƒ5ƒ7*
√4√62ù˝ü˝8@2nid:@contributor_status.top_contributor_ids = [sr.id, octo.id]"
ƒ>ƒ@*
√=√?2¶˝®˝8@2àreturnsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
∆I∆P*
≈H≈O2Û˝˙˝8@2àexpectsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
∆8∆?*
≈7≈>2‚˝È˝8@2çany_instanceORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
∆+∆7*
≈*≈62’˝·˝8@2òContributionGraphStatusORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
∆∆**
≈≈)2±˝‘˝8@2ã
RepositoryORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
∆∆*
≈≈2±˝ª˝8@2rlast_viewed_at2now = @contributor_status.last_viewed_at + 5.hours"
»!»/*
« «.2¢˛∞˛8@2ihours2now = @contributor_status.last_viewed_at + 5.hours"
»4»9*
«3«82µ˛∫˛8@2NfreezeTimecop.freeze(now) do"
……*
»»2…˛œ˛8@2ápluckPemails = sr.emails.pluck(:email) + ["#{sr}@#{GitHub.stealth_email_host_name}"] +"
ÀÀ!*
   2Ù˛˘˛8@2àemailsPemails = sr.emails.pluck(:email) + ["#{sr}@#{GitHub.stealth_email_host_name}"] +"
ÀÀ*
  2Ì˛Û˛8@2ôstealth_email_host_namePemails = sr.emails.pluck(:email) + ["#{sr}@#{GitHub.stealth_email_host_name}"] +"
À=ÀT*
 < S2ïˇ¨ˇ8@2àGitHubPemails = sr.emails.pluck(:email) + ["#{sr}@#{GitHub.stealth_email_host_name}"] +"
À6À<*
 5 ;2éˇîˇ8@2ÄpluckIocto.emails.pluck(:email) + ["#{octo}@#{GitHub.stealth_email_host_name}"]"
ÃÃ*
ÀÀ2»ˇÕˇ8@2ÅemailsIocto.emails.pluck(:email) + ["#{octo}@#{GitHub.stealth_email_host_name}"]"
ÃÃ*
ÀÀ2¡ˇ«ˇ8@2ístealth_email_host_nameIocto.emails.pluck(:email) + ["#{octo}@#{GitHub.stealth_email_host_name}"]"
Ã:ÃQ*
À9ÀP2ÎˇÇÄ8@2ÅGitHubIocto.emails.pluck(:email) + ["#{octo}@#{GitHub.stealth_email_host_name}"]"
Ã3Ã9*
À2À82‰ˇÍˇ8@2kreturns2with(emails).returns(@sample_contribution_metrics)"
œœ*
ŒŒ2ÒÄ¯Ä8@2hwith2with(emails).returns(@sample_contribution_metrics)"
œœ*
Œ
Œ2‰ÄËÄ8@2ÉexpectsJGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data)."
Œ1Œ8*
Õ0Õ72∑ÄæÄ8@2àany_instanceJGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data)."
Œ$Œ0*
Õ#Õ/2™Ä∂Ä8@2ÉEventerJGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data)."
Œ	Œ#*
ÕÕ"2èÄ©Ä8@2Ö	RepoGraphJGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data)."
Œ	Œ*
ÕÕ2èÄ†Ä8@2ÇGitHubJGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data)."
Œ	Œ*
ÕÕ2èÄïÄ8@2ocontributors_data,data = @contributor_status.contributors_data"
—$—5*
–#–42ªÅÃÅ8@2|assert_equal>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
”	”*
““2÷Å‚Å8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
””*
““2ÁÅÎÅ8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
”C”G*
“B“F2êÇîÇ8@2~last_viewed_at>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
”4”B*
“3“A2ÅÇèÇ8@2|assert_equal>assert_equal 2, data.size, "contributors who are github users""
’	’*
‘‘2ûÇ™Ç8@2tsize>assert_equal 2, data.size, "contributors who are github users""
’’"*
‘‘!2≥Ç∑Ç8@2vdetect>octocat = data.detect { |i| i[:author][:login] == octo.login }"
◊◊*
÷÷2ıÇ˚Ç8@2ulogin>octocat = data.detect { |i| i[:author][:login] == octo.login }"
◊@◊E*
÷?÷D2ùÉ¢É8@2cassert_equal%assert_equal 61, octocat[:weeks].size"
ÿ	ÿ*
◊◊2≠ÉπÉ8@2[size%assert_equal 61, octocat[:weeks].size"
ÿ*ÿ.*
◊)◊-2ŒÉ“É8@2passert_equal2assert_equal 3, octocat[:weeks].sum { |w| w[:c] },"
Ÿ	Ÿ*
ÿÿ2€ÉÁÉ8@2gsum2assert_equal 3, octocat[:weeks].sum { |w| w[:c] },"
Ÿ)Ÿ,*
ÿ(ÿ+2˚É˛É8@2qassert_equal3assert_equal 98, octocat[:weeks].sum { |w| w[:a] },"
€	€*
⁄⁄2∞ÑºÑ8@2hsum3assert_equal 98, octocat[:weeks].sum { |w| w[:a] },"
€*€-*
⁄)⁄,2—Ñ‘Ñ8@2passert_equal2assert_equal 3, octocat[:weeks].sum { |w| w[:d] },"
›	›*
‹‹2àÖîÖ8@2gsum2assert_equal 3, octocat[:weeks].sum { |w| w[:d] },"
›)›,*
‹(‹+2®Ö´Ö8@2odetect7sr = data.detect { |i| i[:author][:login] == sr.login }"
‡‡*
ﬂﬂ2ÍÖÖ8@2nlogin7sr = data.detect { |i| i[:author][:login] == sr.login }"
‡9‡>*
ﬂ8ﬂ=2êÜïÜ8@2^assert_equal assert_equal 61, sr[:weeks].size"
·	·*
‡‡2†Ü¨Ü8@2Vsize assert_equal 61, sr[:weeks].size"
·%·)*
‡$‡(2ºÜ¿Ü8@2{assert_equal=assert_equal 3, sr[:weeks].sum { |w| w[:c] }, "total commits""
‚	‚*
··2…Ü’Ü8@2rsum=assert_equal 3, sr[:weeks].sum { |w| w[:c] }, "total commits""
‚$‚'*
·#·&2‰ÜÁÜ8@2OTimecopTimecop.freeze(now) do"
……*
»»2¡˛»˛8@2Xtest"test "handles empty graph data" do"
ÊÊ	*
ÂÂ2ûá¢á8@2ñreturns]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
ÏQÏX*
ÎPÎW2ûâ•â8@2ñexpects]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
Ï/Ï6*
Î.Î52¸àÉâ8@2õany_instance]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
Ï"Ï.*
Î!Î-2Ôà˚à8@2ñEventer]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
ÏÏ!*
ÎÎ 2‘àÓà8@2ò	RepoGraph]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
ÏÏ*
ÎÎ2‘àÂà8@2ïGitHub]GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_contributors_data).returns(empty_data)"
ÏÏ*
ÎÎ2‘à⁄à8@2kreturns2@contributor_status.expects(:ready?).returns(true)"
Ì,Ì3*
Ï+Ï22›â‰â8@2kexpects2@contributor_status.expects(:ready?).returns(true)"
ÌÌ"*
ÏÏ!2Ãâ”â8@2tassert_equal6assert_equal [], @contributor_status.contributors_data"
ÔÔ*
ÓÓ2Úâ˛â8@2ycontributors_data6assert_equal [], @contributor_status.contributors_data"
Ô,Ô=*
Ó+Ó<2óä®ä8@2otest9test "returns empty data when there are no top emails" do"
ÚÚ	*
ÒÒ2∂ä∫ä8@2àreturnsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÛIÛP*
ÚHÚO2∏ãøã8@2àexpectsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Û8Û?*
Ú7Ú>2ßãÆã8@2çany_instanceORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Û+Û7*
Ú*Ú62öã¶ã8@2òContributionGraphStatusORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÛÛ**
ÚÚ)2ˆäôã8@2ã
RepositoryORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÛÛ*
ÚÚ2ˆäÄã8@2ocontributors_data,data = @contributor_status.contributors_data"
Ù"Ù3*
Û!Û22Áã¯ã8@2Oassert_emptyassert_empty data"
ıı*
ÙÙ2ˇããå8@2xtestBtest "returns fresh data instead of stale when it is available" do"
¯¯	*
˜˜2ûå¢å8@2icreate1octo = create(:user, email: "octocat@github.com")"
ˇˇ*
˛˛2¸çÇé8@2∑!assert_fresh_data_overrides_staledassert_fresh_data_overrides_stale(:contributors, stale_data, @sample_contribution_metrics) do |data|"
ÅÅ(*
ÄÄ'2Æéœé8@2Wassert_equalassert_equal 1, data.size"
Ç	Ç*
ÅÅ2õèßè8@2Osizeassert_equal 1, data.size"
ÇÇ"*
ÅÅ!2∞è¥è8@2lassert_equal.assert_equal data.first[:author][:id], octo.id"
É	É*
ÇÇ2Ωè…è8@2efirst.assert_equal data.first[:author][:id], octo.id"
ÉÉ *
ÇÇ2œè‘è8@2bid.assert_equal data.first[:author][:id], octo.id"
É5É7*
Ç4Ç62ÈèÎè8@2dassert_equal&assert_equal weeks, data.first[:weeks]"
â	â*
àà2ûë™ë8@2]first&assert_equal weeks, data.first[:weeks]"
â"â'*
à!à&2∑ëºë8@2Wcontextcontext "graph preparation" do"
éé
*
çç	2‡ëÁë8@2zeachD%w(code_frequency contributors commit_activity).each do |graph_name|"
è5è9*
é4é82≥í∑í8@2ètestYtest "##{graph_name}_data enqueues data gathering job once when status is not current" do"
êê*
èè
2Œí“í8@2llast_indexed_oid*@contributor_status.last_indexed_oid = nil"
ëë-*
êê,2ƒì‘ì8@2sonce=RepositoryContributionMetricsJob.expects(:perform_later).once"
íBíF*
ëAëE2úî†î8@2vexpects=RepositoryContributionMetricsJob.expects(:perform_later).once"
í*í1*
ë)ë02Ñîãî8@2è RepositoryContributionMetricsJob=RepositoryContributionMetricsJob.expects(:perform_later).once"
í	í)*
ëë(2„ìÉî8@2ato_sym)method_name = "#{graph_name}_data".to_sym"
ì,ì2*
í+í12Ãî“î8@2[send%@contributor_status.send(method_name)"
îî!*
ìì 2ÔîÛî8@2[send%@contributor_status.send(method_name)"
ïï!*
îî 2ùï°ï8@2ñtest`test "##{graph_name}_data returns nil without marking as viewed if eventer is not up to date" do"
òò*
óó
2¿ïƒï8@2IfreezeTimecop.freeze do"
ôô*
òò2±ñ∑ñ8@2Uupdate!@contributor_status.update!("
öö&*
ôô%2Ÿñ‡ñ8@2zdefault_oid=last_indexed_oid: @contributor_status.repository.default_oid,"
õ>õI*
ö=öH2üó™ó8@2y
repository=last_indexed_oid: @contributor_status.repository.default_oid,"
õ3õ=*
ö2ö<2îóûó8@2Qagolast_viewed_at: 5.hours.ago,"
ú%ú(*
õ$õ'2–ó”ó8@2Shourslast_viewed_at: 5.hours.ago,"
úú$*
õõ#2 óœó8@2Sagolast_indexed_at: 1.minute.ago,"
ù'ù**
ú&ú)2˚ó˛ó8@2Vminutelast_indexed_at: 1.minute.ago,"
ù ù&*
úú%2Ùó˙ó8@2xstubsAGitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: false)"
ü3ü8*
û2û72æò√ò8@2any_instanceAGitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: false)"
ü&ü2*
û%û12±òΩò8@2zEventerAGitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: false)"
üü%*
û
û$2ñò∞ò8@2|	RepoGraphAGitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: false)"
üü*
û
û2ñòßò8@2yGitHubAGitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: false)"
üü*
û
û2ñòúò8@2klast_viewed_at+before = @contributor_status.last_viewed_at"
†(†6*
ü'ü52ˇòçô8@2|
assert_nil@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
¢¢*
°
°2ôô£ô8@2vsend@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
¢*¢.*
°)°-2∏ôºô8@2xto_sym@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
¢D¢J*
°C°I2“ôÿô8@2uassert_equal7assert_equal before, @contributor_status.last_viewed_at"
££*
¢
¢2‰ôô8@2wlast_viewed_at7assert_equal before, @contributor_status.last_viewed_at"
£4£B*
¢3¢A2çöõö8@2JTimecopTimecop.freeze do"
ô	ô*
òò2©ñ∞ñ8@2btest,test "##{graph_name}_data tracks metrics" do"
ßß*
¶¶
2πöΩö8@2ureturns<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®!®(*
ß ß'2Üõçõ8@2qnew<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®A®D*
ß@ßC2¶õ©õ8@2}MemoryDogstatsD<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®)®@*
ß(ß?2éõ•õ8@2tGitHub<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®)®/*
ß(ß.2éõîõ8@2sstubs<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®®*
ßß2ıö˙ö8@2tGitHub<GitHub.stubs(:dogstats).returns(GitHub::MemoryDogstatsD.new)"
®	®*
ßß2ÓöÙö8@2ìlast_indexed_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
©©-*
®®,2«õ◊õ8@2édefault_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
©O©Z*
®N®Y2˘õÑú8@2ç
repositoryQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
©D©N*
®C®M2Óõ¯õ8@2wstubs@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
™1™6*
©0©52µú∫ú8@2~any_instance@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
™$™0*
©#©/2®ú¥ú8@2yEventer@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
™	™#*
©©"2çúßú8@2{	RepoGraph@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
™	™*
©©2çúûú8@2xGitHub@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
™	™*
©©2çúìú8@2óreturns^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´\´c*
™[™b2©ù∞ù8@2óexpects^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´1´8*
™0™72˛úÖù8@2ñto_sym^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´T´Z*
™S™Y2°ùßù8@2úany_instance^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´$´0*
™#™/2Òú˝ú8@2óEventer^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´	´#*
™™"2÷úú8@2ô	RepoGraph^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´	´*
™™2÷úÁú8@2ñGitHub^GitHub::RepoGraph::Eventer.any_instance.expects("fetch_#{graph_name}_data".to_sym).returns({})"
´	´*
™™2÷ú‹ú8@2ksend5@contributor_status.send("#{graph_name}_data".to_sym)"
≠≠!*
¨¨ 2“ù÷ù8@2mto_sym5@contributor_status.send("#{graph_name}_data".to_sym)"
≠7≠=*
¨6¨<2ÏùÚù8@2ynewDexpected_tags = Set.new(["graph_name:#{graph_name}", "stale:false"])"
ØØ *
ÆÆ2ëûîû8@2ySetDexpected_tags = Set.new(["graph_name:#{graph_name}", "stale:false"])"
ØØ*
ÆÆ2çûêû8@2o
increments3ops = GitHub.dogstats.increments("repographs.view")"
∞∞)*
ØØ(2‡ûÍû8@2mdogstats3ops = GitHub.dogstats.increments("repographs.view")"
∞∞*
ØØ2◊ûﬂû8@2kGitHub3ops = GitHub.dogstats.increments("repographs.view")"
∞∞*
ØØ2–û÷û8@2Wassert_equalassert_equal 1, ops.count"
±	±*
∞∞2Üüíü8@2Pcountassert_equal 1, ops.count"
±±"*
∞∞!2öüüü8@2hassert_equal*assert_equal expected_tags, ops.first.tags"
≤	≤*
±±2®ü¥ü8@2`tags*assert_equal expected_tags, ops.first.tags"
≤/≤3*
±.±22Œü“ü8@2afirst*assert_equal expected_tags, ops.first.tags"
≤)≤.*
±(±-2»üÕü8@2wassert_timing8assert_timing("repographs.display", tags: expected_tags)"
¥	¥*
≥≥2‹üÈü8@2rtest<test "##{graph_name}_data handles Eventer::Client::Error" do"
∑∑*
∂∂
2¶†™†8@2ìlast_indexed_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
∏∏-*
∑∑,2ˇ†è°8@2édefault_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
∏O∏Z*
∑N∑Y2±°º°8@2ç
repositoryQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
∏D∏N*
∑C∑M2¶°∞°8@2îraises\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
πGπM*
∏F∏L2É¢â¢8@2ìError\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
πNπd*
∏M∏c2ä¢†¢8@2îClient\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
πNπ]*
∏M∏\2ä¢ô¢8@2ïEventer\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
πNπU*
∏M∏T2ä¢ë¢8@2ïexpects\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
π1π8*
∏0∏72Ì°Ù°8@2öany_instance\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
π$π0*
∏#∏/2‡°Ï°8@2ïEventer\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
π	π#*
∏∏"2≈°ﬂ°8@2ó	RepoGraph\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
π	π*
∏∏2≈°÷°8@2îGitHub\GitHub::RepoGraph::Eventer.any_instance.expects(:up_to_date?).raises(Eventer::Client::Error)"
π	π*
∏∏2≈°À°8@2xwithBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫"∫&*
π!π%2√¢«¢8@2instance_ofBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫'∫2*
π&π12»¢”¢8@2yErrorBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫3∫I*
π2πH2‘¢Í¢8@2zClientBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫3∫B*
π2πA2‘¢„¢8@2{EventerBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫3∫:*
π2π92‘¢€¢8@2{expectsBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫∫*
ππ2≤¢π¢8@2{FailbotBFailbot.expects(:report).with(instance_of(Eventer::Client::Error))"
∫	∫*
ππ2™¢±¢8@2_assert_nothing_raisedassert_nothing_raised do"
º	º*
ªª2ˆ¢ã£8@2|
assert_nil@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
ΩΩ*
º
º2ô£££8@2vsend@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
Ω*Ω.*
º)º-2∏£º£8@2xto_sym@assert_nil @contributor_status.send("#{graph_name}_data".to_sym)"
ΩDΩJ*
ºCºI2“£ÿ£8@2ÑtestNtest "##{graph_name}_data cache key includes the last_indexed_at timestamp" do"
¡¡*
¿¿
2˜£˚£8@2Xfreeze Timecop.freeze(5.minutes.ago) do"
¬¬*
¡¡2÷§‹§8@2Uago Timecop.freeze(5.minutes.ago) do"
¬"¬%*
¡!¡$2Á§Í§8@2Yminutes Timecop.freeze(5.minutes.ago) do"
¬¬!*
¡¡ 2ﬂ§Ê§8@2ìlast_indexed_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
√√/*
¬¬.2ç•ù•8@2édefault_oidQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
√Q√\*
¬P¬[2ø• •8@2ç
repositoryQ@contributor_status.last_indexed_oid = @contributor_status.repository.default_oid"
√F√P*
¬E¬O2¥•æ•8@2YTimecop Timecop.freeze(5.minutes.ago) do"
¬	¬*
¡¡2Œ§’§8@2wstubs@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
∆1∆6*
≈0≈52à¶ç¶8@2~any_instance@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
∆$∆0*
≈#≈/2˚•á¶8@2yEventer@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
∆	∆#*
≈≈"2‡•˙•8@2{	RepoGraph@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
∆	∆*
≈≈2‡•Ò•8@2xGitHub@GitHub::RepoGraph::Eventer.any_instance.stubs(up_to_date?: true)"
∆	∆*
≈≈2‡•Ê•8@2Ywith_cache_enabledwith_cache_enabled do"
»	»*
««2™¶º¶8@2ëreturnsXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
…X…_*
»W»^2óßûß8@2ëexpectsXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
…3…:*
»2»92Ú¶˘¶8@2ñany_instanceXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
…&…2*
»%»12Â¶Ò¶8@2ëEventerXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
……%*
»
»$2 ¶‰¶8@2ì	RepoGraphXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
……*
»
»2 ¶€¶8@2êGitHubXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
……*
»
»2 ¶–¶8@2esend/@contributor_status.send(:"#{graph_name}_data")"
  #*
……"2¡ß≈ß8@2âneverRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
ÃXÃ]*
ÀWÀ\2µ®∫®8@2ãexpectsRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
Ã3Ã:*
À2À92ê®ó®8@2êany_instanceRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
Ã&Ã2*
À%À12É®è®8@2ãEventerRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
ÃÃ%*
À
À$2ËßÇ®8@2ç	RepoGraphRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
ÃÃ*
À
À2Ëß˘ß8@2äGitHubRGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").never"
ÃÃ*
À
À2ËßÓß8@2esend/@contributor_status.send(:"#{graph_name}_data")"
ÕÕ#*
ÃÃ"2Ÿ®›®8@2olast_indexed_at.@contributor_status.last_indexed_at = Time.now"
œœ.*
ŒŒ-2î©£©8@2cnow.@contributor_status.last_indexed_at = Time.now"
œ6œ9*
Œ5Œ82´©Æ©8@2dTime.@contributor_status.last_indexed_at = Time.now"
œ1œ5*
Œ0Œ42¶©™©8@2ëreturnsXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
–X–_*
œWœ^2Ü™ç™8@2ëexpectsXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
–3–:*
œ2œ92·©Ë©8@2ñany_instanceXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
–&–2*
œ%œ12‘©‡©8@2ëEventerXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
––%*
œ
œ$2π©”©8@2ì	RepoGraphXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
––*
œ
œ2π© ©8@2êGitHubXGitHub::RepoGraph::Eventer.any_instance.expects(:"fetch_#{graph_name}_data").returns({})"
––*
œ
œ2π©ø©8@2esend/@contributor_status.send(:"#{graph_name}_data")"
““#*
——"2±™µ™8@2çtestWtest "#code_frequency_data returns fresh data instead of stale when it is available" do"
ÿÿ*
◊◊2Ù™¯™8@2rto_i<"RepoGraphs_Additions" => [[Time.utc(2011, 2, 4).to_i, 90]],"
ﬁ8ﬁ<*
›7›;2˜¨˚¨8@2qutc<"RepoGraphs_Additions" => [[Time.utc(2011, 2, 4).to_i, 90]],"
ﬁ(ﬁ+*
›'›*2Á¨Í¨8@2rTime<"RepoGraphs_Additions" => [[Time.utc(2011, 2, 4).to_i, 90]],"
ﬁ#ﬁ'*
›"›&2‚¨Ê¨8@2ß!assert_fresh_data_overrides_staleTassert_fresh_data_overrides_stale(:code_frequency, stale_data, fresh_data) do |data|"
„„&*
‚‚%2ˇ≠†Æ8@2Yassert_equalassert_equal expected, data"
‰‰*
„„2⁄ÆÊÆ8@2ÉtestMtest "#code_frequency_data fetches data from Eventer if enabled and ready" do"
ËË*
ÁÁ2áØãØ8@2a
repository%repo = @contributor_status.repository"
È È**
ËË)2ÙØ˛Ø8@2àupdate_columnI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
ÍÍ&*
ÈÈ%2ó∞§∞8@2~utcI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
Í=Í@*
È<È?2ª∞æ∞8@2TimeI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
Í8Í<*
È7È;2∂∞∫∞8@2àreturnsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÏGÏN*
ÎFÎM2î±õ±8@2àexpectsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Ï6Ï=*
Î5Î<2É±ä±8@2çany_instanceORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Ï)Ï5*
Î(Î42ˆ∞Ç±8@2òContributionGraphStatusORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÏÏ(*
ÎÎ'2“∞ı∞8@2ã
RepositoryORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÏÏ*
ÎÎ2“∞‹∞8@2rlast_viewed_at2now = @contributor_status.last_viewed_at + 5.hours"
ÓÓ-*
ÌÌ,2¡±œ±8@2ihours2now = @contributor_status.last_viewed_at + 5.hours"
Ó2Ó7*
Ì1Ì62‘±Ÿ±8@2NfreezeTimecop.freeze(now) do"
ÔÔ*
ÓÓ2Ê±Ï±8@2Vto_i [Time.utc(2011, 2, 4).to_i, 90],"
Ú!Ú%*
Ò Ò$2”≤◊≤8@2Uutc [Time.utc(2011, 2, 4).to_i, 90],"
ÚÚ*
ÒÒ2√≤∆≤8@2VTime [Time.utc(2011, 2, 4).to_i, 90],"
ÚÚ*
ÒÒ2æ≤¬≤8@2Uto_i[Time.utc(2011, 2, 6).to_i, 7],"
Û!Û%*
Ú Ú$2˛≤Ç≥8@2Tutc[Time.utc(2011, 2, 6).to_i, 7],"
ÛÛ*
ÚÚ2Ó≤Ò≤8@2UTime[Time.utc(2011, 2, 6).to_i, 7],"
ÛÛ*
ÚÚ2È≤Ì≤8@2Uto_i[Time.utc(2011, 2, 7).to_i, 1],"
Ù!Ù%*
Û Û$2®≥¨≥8@2Tutc[Time.utc(2011, 2, 7).to_i, 1],"
ÙÙ*
ÛÛ2ò≥õ≥8@2UTime[Time.utc(2011, 2, 7).to_i, 1],"
ÙÙ*
ÛÛ2ì≥ó≥8@2Wto_i![Time.utc(2011, 2, 23).to_i, 38],"
ı"ı&*
Ù!Ù%2”≥◊≥8@2Vutc![Time.utc(2011, 2, 23).to_i, 38],"
ıı*
ÙÙ2¬≥≈≥8@2WTime![Time.utc(2011, 2, 23).to_i, 38],"
ıı*
ÙÙ2Ω≥¡≥8@2Uto_i[Time.utc(2011, 2, 6).to_i, 8],"
¯!¯%*
˜ ˜$2≠¥±¥8@2Tutc[Time.utc(2011, 2, 6).to_i, 8],"
¯¯*
˜˜2ù¥†¥8@2UTime[Time.utc(2011, 2, 6).to_i, 8],"
¯¯*
˜˜2ò¥ú¥8@2Xto_i"[Time.utc(2011, 2, 24).to_i, 453],"
˘"˘&*
¯!¯%2ÿ¥‹¥8@2Wutc"[Time.utc(2011, 2, 24).to_i, 453],"
˘˘*
¯¯2«¥ ¥8@2XTime"[Time.utc(2011, 2, 24).to_i, 453],"
˘˘*
¯¯2¬¥∆¥8@2ùreturnsdGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝S˝Z*
¸R¸Y2 µ—µ8@2ùexpectsdGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝/˝6*
¸.¸52¶µ≠µ8@2¢any_instancedGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝"˝.*
¸!¸-2ôµ•µ8@2ùEventerdGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝˝!*
¸¸ 2˛¥òµ8@2ü	RepoGraphdGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝˝*
¸¸2˛¥èµ8@2úGitHubdGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(eventer_metrics)"
˝˝*
¸¸2˛¥Ñµ8@2scode_frequency_data.data = @contributor_status.code_frequency_data"
ˇ"ˇ5*
˛!˛42Ö∂ò∂8@2|assert_equal>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
ÅÅ*
ÄÄ2†∂¨∂8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
ÅÅ*
ÄÄ2±∂µ∂8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
ÅAÅE*
Ä@ÄD2⁄∂ﬁ∂8@2~last_viewed_at>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
Å2Å@*
Ä1Ä?2À∂Ÿ∂8@2Yassert_equalassert_equal expected, data"
çç*
åå2Ã∏ÿ∏8@2OTimecopTimecop.freeze(now) do"
ÔÔ*
ÓÓ2ﬁ±Â±8@2utest?test "#code_frequency_data handles empty eventer result set" do"
ëë*
êê2˘∏˝∏8@2òreturns_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ñQñX*
ïPïW2Í∫Ò∫8@2òexpects_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ñ-ñ4*
ï,ï32∆∫Õ∫8@2ùany_instance_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ñ ñ,*
ïï+2π∫≈∫8@2òEventer_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ññ*
ïï2û∫∏∫8@2ö	RepoGraph_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ññ*
ïï2û∫Ø∫8@2óGitHub_GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_code_frequency_data).returns(empty_data)"
ññ*
ïï
2û∫§∫8@2kreturns2@contributor_status.expects(:ready?).returns(true)"
ó*ó1*
ñ)ñ02ßªÆª8@2kexpects2@contributor_status.expects(:ready?).returns(true)"
óó *
ññ2ñªùª8@2vassert_equal8assert_equal [], @contributor_status.code_frequency_data"
ôô*
òò2∫ª∆ª8@2}code_frequency_data8assert_equal [], @contributor_status.code_frequency_data"
ô*ô=*
ò)ò<2ﬂªÚª8@2étestXtest "#commit_activity_data returns fresh data instead of stale when it is available" do"
úú*
õõ2¸ªÄº8@2to_iIfresh_data = { "RepoGraphs_Commits" => [[Time.utc(2019, 3, 3).to_i, 7]] }"
ûCûG*
ùBùF2«ΩÀΩ8@2~utcIfresh_data = { "RepoGraphs_Commits" => [[Time.utc(2019, 3, 3).to_i, 7]] }"
û3û6*
ù2ù52∑Ω∫Ω8@2TimeIfresh_data = { "RepoGraphs_Commits" => [[Time.utc(2019, 3, 3).to_i, 7]] }"
û.û2*
ù-ù12≤Ω∂Ω8@2Tutcnow = Time.utc(2019, 3, 15, 10)"
††*
üü2„ΩÊΩ8@2UTimenow = Time.utc(2019, 3, 15, 10)"
††*
ü
ü2ﬁΩ‚Ω8@2û!assert_fresh_data_overrides_staleKassert_fresh_data_overrides_stale(:commit_activity, stale_data, fresh_data,"
°°&*
††%2¸Ωùæ8@2zempty_commit_activity_data.parsed_stale: empty_commit_activity_data(now),"
¢¢/*
°°.2‹æˆæ8@2Xassert_equalassert_equal 52, data.size"
••*
§§2¢øÆø8@2Psizeassert_equal 52, data.size"
••!*
§§ 2∏øºø8@2êassert_equalRassert_equal({total: 7, week: 1551571200, days: [7, 0, 0, 0, 0, 0, 0] }, data[50])"
¶¶*
••2√øœø8@2ÑtestNtest "#commit_activity_data fetches data from Eventer if enabled and ready" do"
™™*
©©2ß¿´¿8@2a
repository%repo = @contributor_status.repository"
´ ´**
™™)2ï¡ü¡8@2àupdate_columnI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
¨¨&*
´´%2∏¡≈¡8@2~utcI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
¨=¨@*
´<´?2‹¡ﬂ¡8@2TimeI@contributor_status.update_column(:last_viewed_at, Time.utc(2011, 3, 15))"
¨8¨<*
´7´;2◊¡€¡8@2àreturnsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÆGÆN*
≠F≠M2µ¬º¬8@2àexpectsORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Æ6Æ=*
≠5≠<2§¬´¬8@2çany_instanceORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
Æ)Æ5*
≠(≠42ó¬£¬8@2òContributionGraphStatusORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÆÆ(*
≠≠'2Û¡ñ¬8@2ã
RepositoryORepository::ContributionGraphStatus.any_instance.expects(:ready?).returns(true)"
ÆÆ*
≠≠2Û¡˝¡8@2rlast_viewed_at2now = @contributor_status.last_viewed_at + 5.hours"
∞∞-*
ØØ,2‚¬¬8@2ihours2now = @contributor_status.last_viewed_at + 5.hours"
∞2∞7*
Ø1Ø62ı¬˙¬8@2NfreezeTimecop.freeze(now) do"
±±*
∞∞2á√ç√8@2Vto_i [Time.utc(2011, 2, 4).to_i, 90],"
¥!¥%*
≥ ≥$2Ú√ˆ√8@2Uutc [Time.utc(2011, 2, 4).to_i, 90],"
¥¥*
≥≥2‚√Â√8@2VTime [Time.utc(2011, 2, 4).to_i, 90],"
¥¥*
≥≥2›√·√8@2Uto_i[Time.utc(2011, 2, 6).to_i, 7],"
µ!µ%*
¥ ¥$2ùƒ°ƒ8@2Tutc[Time.utc(2011, 2, 6).to_i, 7],"
µµ*
¥¥2çƒêƒ8@2UTime[Time.utc(2011, 2, 6).to_i, 7],"
µµ*
¥¥2àƒåƒ8@2Uto_i[Time.utc(2011, 2, 7).to_i, 1],"
∂!∂%*
µ µ$2«ƒÀƒ8@2Tutc[Time.utc(2011, 2, 7).to_i, 1],"
∂∂*
µµ2∑ƒ∫ƒ8@2UTime[Time.utc(2011, 2, 7).to_i, 1],"
∂∂*
µµ2≤ƒ∂ƒ8@2Wto_i![Time.utc(2011, 2, 23).to_i, 38],"
∑"∑&*
∂!∂%2Úƒˆƒ8@2Vutc![Time.utc(2011, 2, 23).to_i, 38],"
∑∑*
∂∂2·ƒ‰ƒ8@2WTime![Time.utc(2011, 2, 23).to_i, 38],"
∑∑*
∂∂2‹ƒ‡ƒ8@2ûreturnseGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ªTª[*
∫S∫Z2‰≈Î≈8@2ûexpectseGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ª/ª6*
∫.∫52ø≈∆≈8@2£any_instanceeGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ª"ª.*
∫!∫-2≤≈æ≈8@2ûEventereGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ªª!*
∫∫ 2ó≈±≈8@2†	RepoGrapheGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ªª*
∫∫2ó≈®≈8@2ùGitHubeGitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(eventer_metrics)"
ªª*
∫∫2ó≈ù≈8@2{commit_activity_data5weeks_data = @contributor_status.commit_activity_data"
Ω(Ω<*
º'º;2•∆π∆8@2|assert_equal>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
ææ*
ΩΩ2¿∆Ã∆8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
ææ*
ΩΩ2—∆’∆8@2tto_i>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
æAæE*
Ω@ΩD2˙∆˛∆8@2~last_viewed_at>assert_equal now.to_i, @contributor_status.last_viewed_at.to_i"
æ2æ@*
Ω1Ω?2Î∆˘∆8@2^assert_equal assert_equal 52, weeks_data.size"
¿¿*
øø2Ü«í«8@2Vsize assert_equal 52, weeks_data.size"
¿#¿'*
ø"ø&2¢«¶«8@2~assert_equal@assert_equal Time.utc(2010, 3, 21).to_i, weeks_data.first[:week]"
¡¡*
¿¿2≠«π«8@2vto_i@assert_equal Time.utc(2010, 3, 21).to_i, weeks_data.first[:week]"
¡*¡.*
¿)¿-2–«‘«8@2uutc@assert_equal Time.utc(2010, 3, 21).to_i, weeks_data.first[:week]"
¡¡*
¿¿2ø«¬«8@2vTime@assert_equal Time.utc(2010, 3, 21).to_i, weeks_data.first[:week]"
¡¡*
¿¿2∫«æ«8@2wfirst@assert_equal Time.utc(2010, 3, 21).to_i, weeks_data.first[:week]"
¡;¡@*
¿:¿?2·«Ê«8@2}assert_equal?assert_equal Time.utc(2011, 3, 13).to_i, weeks_data.last[:week]"
¬¬*
¡¡2Ù«Ä»8@2uto_i?assert_equal Time.utc(2011, 3, 13).to_i, weeks_data.last[:week]"
¬*¬.*
¡)¡-2ó»õ»8@2tutc?assert_equal Time.utc(2011, 3, 13).to_i, weeks_data.last[:week]"
¬¬*
¡¡2Ü»â»8@2uTime?assert_equal Time.utc(2011, 3, 13).to_i, weeks_data.last[:week]"
¬¬*
¡¡2Å»Ö»8@2ulast?assert_equal Time.utc(2011, 3, 13).to_i, weeks_data.last[:week]"
¬;¬?*
¡:¡>2®»¨»8@2ydetectAweek_of_jan_30 = weeks_data.detect { |w| w[:week] == 1296345600 }"
ƒ#ƒ)*
√"√(2◊»›»8@2eassert_equal'assert_equal 90, week_of_jan_30[:total]"
≈≈*
ƒƒ2É…è…8@2xassert_equal:assert_equal [0, 0, 0, 0, 0, 90, 0], week_of_jan_30[:days]"
∆∆*
≈≈2±…Ω…8@2ydetectAweek_of_feb_06 = weeks_data.detect { |w| w[:week] == 1296950400 }"
»#»)*
«"«(2è ï 8@2dassert_equal&assert_equal 8, week_of_feb_06[:total]"
……*
»»2ª « 8@2wassert_equal9assert_equal [7, 1, 0, 0, 0, 0, 0], week_of_feb_06[:days]"
  *
……2Ë Ù 8@2ydetectAweek_of_feb_20 = weeks_data.detect { |w| w[:week] == 1298160000 }"
Ã#Ã)*
À"À(2≈ÀÀÀ8@2eassert_equal'assert_equal 38, week_of_feb_20[:total]"
ÕÕ*
ÃÃ2ÒÀ˝À8@2xassert_equal:assert_equal [0, 0, 0, 38, 0, 0, 0], week_of_feb_20[:days]"
ŒŒ*
ÕÕ2üÃ´Ã8@2OTimecopTimecop.freeze(now) do"
±±*
∞∞2ˇ¬Ü√8@2vtest@test "#commit_activity_data handles empty eventer result set" do"
““*
——2ÎÃÔÃ8@2ôreturns`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷R÷Y*
’Q’X2∏ŒøŒ8@2ôexpects`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷-÷4*
’,’32ìŒöŒ8@2ûany_instance`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷ ÷,*
’’+2ÜŒíŒ8@2ôEventer`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷÷*
’’2ÎÕÖŒ8@2õ	RepoGraph`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷÷*
’’2ÎÕ¸Õ8@2òGitHub`GitHub::RepoGraph::Eventer.any_instance.expects(:fetch_commit_activity_data).returns(empty_data)"
÷÷*
’’
2ÎÕÒÕ8@2kreturns2@contributor_status.expects(:ready?).returns(true)"
◊*◊1*
÷)÷02ıŒ¸Œ8@2kexpects2@contributor_status.expects(:ready?).returns(true)"
◊◊ *
÷÷2‰ŒÎŒ8@2Tutcnow = Time.utc(2019, 3, 15, 10)"
ŸŸ*
ÿÿ2ìœñœ8@2UTimenow = Time.utc(2019, 3, 15, 10)"
ŸŸ*
ÿ
ÿ2éœíœ8@2NfreezeTimecop.freeze(now) do"
⁄⁄*
ŸŸ2¥œ∫œ8@2îassert_equalVassert_equal empty_commit_activity_data(now), @contributor_status.commit_activity_data"
€€*
⁄⁄2…œ’œ8@2¢empty_commit_activity_dataVassert_equal empty_commit_activity_data(now), @contributor_status.commit_activity_data"
€€.*
⁄⁄-2÷œœ8@2úcommit_activity_dataVassert_equal empty_commit_activity_data(now), @contributor_status.commit_activity_data"
€I€]*
⁄H⁄\2ã–ü–8@2OTimecopTimecop.freeze(now) do"
⁄⁄*
ŸŸ2¨œ≥œ8@2ãempty_commit_activity_data?def empty_commit_activity_data(now = Time.utc(2019, 3, 15, 10))"
ﬂﬂ!*
ﬁﬁ 2µ–œ–8@2tutc?def empty_commit_activity_data(now = Time.utc(2019, 3, 15, 10))"
ﬂ-ﬂ0*
ﬁ,ﬁ/2€–ﬁ–8@2uTime?def empty_commit_activity_data(now = Time.utc(2019, 3, 15, 10))"
ﬂ(ﬂ,*
ﬁ'ﬁ+2÷–⁄–8@2rto_i<first_week = (now.beginning_of_day - 52.weeks + 2.days).to_i"
‚=‚A*
·<·@2€“ﬂ“8@2~beginning_of_day<first_week = (now.beginning_of_day - 52.weeks + 2.days).to_i"
‚‚'*
··&2µ“≈“8@2sweeks<first_week = (now.beginning_of_day - 52.weeks + 2.days).to_i"
‚-‚2*
·,·12À“–“8@2rdays<first_week = (now.beginning_of_day - 52.weeks + 2.days).to_i"
‚7‚;*
·6·:2’“Ÿ“8@2Lto_ione_week = 1.week.to_i"
„„*
‚‚2ˆ“˙“8@2Lweekone_week = 1.week.to_i"
„„*
‚‚2Ò“ı“8@2Umap expected = 0.upto(51).map do |i|"
ÂÂ*
‰‰2®”´”8@2Vupto expected = 0.upto(51).map do |i|"
ÂÂ*
‰‰2ü”£”8@2Åassert_metrics_published7def assert_metrics_published(date:, author:, **metrics)"
ÎÎ*
ÍÍ2ñ‘Æ‘8@2l	ADDITIONS1additions: GitHub::RepoGraph::Eventer::ADDITIONS,"
ÌÌ7*
ÏÏ62Ì‘í’8@2jEventer1additions: GitHub::RepoGraph::Eventer::ADDITIONS,"
ÌÌ,*
ÏÏ+2Ì‘á’8@2l	RepoGraph1additions: GitHub::RepoGraph::Eventer::ADDITIONS,"
ÌÌ#*
ÏÏ"2Ì‘˛‘8@2iGitHub1additions: GitHub::RepoGraph::Eventer::ADDITIONS,"
ÌÌ*
ÏÏ2Ì‘Û‘8@2l	DELETIONS1deletions: GitHub::RepoGraph::Eventer::DELETIONS,"
ÓÓ7*
ÌÌ62•’ ’8@2jEventer1deletions: GitHub::RepoGraph::Eventer::DELETIONS,"
ÓÓ,*
ÌÌ+2•’ø’8@2l	RepoGraph1deletions: GitHub::RepoGraph::Eventer::DELETIONS,"
ÓÓ#*
ÌÌ"2•’∂’8@2iGitHub1deletions: GitHub::RepoGraph::Eventer::DELETIONS,"
ÓÓ*
ÌÌ2•’´’8@2fCOMMITS-commits: GitHub::RepoGraph::Eventer::COMMITS,"
ÔÔ3*
ÓÓ22€’˛’8@2fEventer-commits: GitHub::RepoGraph::Eventer::COMMITS,"
ÔÔ**
ÓÓ)2€’ı’8@2h	RepoGraph-commits: GitHub::RepoGraph::Eventer::COMMITS,"
ÔÔ!*
ÓÓ 2€’Ï’8@2eGitHub-commits: GitHub::RepoGraph::Eventer::COMMITS,"
ÔÔ*
ÓÓ2€’·’8@2\each&event_map.each do |metric, event_name|"
ÚÚ*
ÒÒ2ï÷ô÷8@2Jzero?next if delta.zero?"
ÙÙ*
ÛÛ2‰÷È÷8@2Zwith$Eventer::Event.expects(:track).with("
ı&ı**
Ù%Ù)2è◊ì◊8@2V
repositoryowner: @status.repository,"
˜˜"*
ˆˆ!2¿◊ ◊8@2Sparsetimestamp: Date.parse(date),"
¯¯*
˜˜2‰◊È◊8@2RDatetimestamp: Date.parse(date),"
¯¯*
˜˜2ﬂ◊„◊8@2]expects$Eventer::Event.expects(:track).with("
ıı*
ÙÙ2ˇ÷Ü◊8@2[Event$Eventer::Event.expects(:track).with("
ıı*
ÙÙ2÷˛÷8@2]Eventer$Eventer::Event.expects(:track).with("
ıı*
ÙÙ2÷˜÷8@