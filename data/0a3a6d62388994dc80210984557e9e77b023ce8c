
(0a3a6d62388994dc80210984557e9e77b023ce8c*test/integration/labels_controller_test.rbRuby"02~LabelsControllerHttpTest<class LabelsControllerHttpTest < GitHub::IntegrationTestCase"
*
2<T8@2yIntegrationTestCase<class LabelsControllerHttpTest < GitHub::IntegrationTestCase"
"=*
!<2Wr8@2lGitHub<class LabelsControllerHttpTest < GitHub::IntegrationTestCase"
"(*
!'2W]8@2=fixturesfixtures do"
*

2u}8@2]preview_user%@owner = preview_user(:verified_user)"
*
2éö8@2Icreate@member = create(:user)"
*
2πø8@2Lcreate@nonmember = create(:user)"
		*
2ÿﬁ8@2screateA@repo = create(:repository, owner: @owner, has_discussions: true)"
*


2Û˘8@2^
add_member(@repo.add_member(@member, @owner, false)"
*

2∑¡8@2`create.@label = @repo.labels.create(name: "Features")"
!*
 2ı˚8@2`labels.@label = @repo.labels.create(name: "Features")"
*
2ÓÙ8@2Ttest$test "renders label preview HTML" do"
*
2óõ8@27as	as @owner"
*
2¿¬8@2Uget&get "/#{@repo.name_with_owner}/labels""
*
2Œ—8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
"*
!2‹Î8@2Zassert_select!assert_select ".js-label-preview""
*
2˙á8@2dassert_select+assert_select ".js-label-preview-container""
*
2†≠8@2ntest>test "does not render non-g-emoji HTML tags in label names" do"
*
2’Ÿ8@2ocreate=label = @repo.labels.create(name: "hey :grinning: <u>hi</u>")"
 *
2≠≥8@2olabels=label = @repo.labels.create(name: "hey :grinning: <u>hi</u>")"
*
2¶¨8@2ª
GRIN_EMOJIÑg_emoji = %Q(<g-emoji class="g-emoji" alias="grinning" fallback-src="/images/icons/emoji/unicode/1f600.png">#{GRIN_EMOJI}</g-emoji>)"
s}*
r|2»“8@27as	as @owner"
*
2‰Ê8@2Uget&get "/#{@repo.name_with_owner}/labels""
*
2Úı8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
"*
!2Äè8@2Nassert_responseassert_response :ok"
  *
2û≠8@2Ñassert_selectKassert_select "[data-test-selector='label-link'] g-emoji[alias='grinning']""
!!*
  2∂√8@2sassert_select:assert_select "[data-test-selector='label-link'] u", false"
""*
!!2Üì8@2Äassert_includesEassert_includes response.body, "hey #{g_emoji} &lt;u&gt;hi&lt;/u&gt;""
##*
""2≈‘8@2ubodyEassert_includes response.body, "hey #{g_emoji} &lt;u&gt;hi&lt;/u&gt;""
##"*
""!2ﬁ‚8@2yresponseEassert_includes response.body, "hey #{g_emoji} &lt;u&gt;hi&lt;/u&gt;""
##*
""2’›8@2Itesttest "searches labels" do"
&&*
%%2î	ò	8@2\create*label2 = @repo.labels.create(name: "Bugs")"
''!*
&& 2»	Œ	8@2\labels*label2 = @repo.labels.create(name: "Bugs")"
''*
&&2¡	«	8@2Ymake_searchablemake_searchable @label, label2"
((*
''2·		8@27as	as @owner"
***
))2Ö
á
8@2lget=get "/#{@repo.name_with_owner}/labels", params: { q: "Bugs" }"
++*
**2ì
ñ
8@2xname_with_owner=get "/#{@repo.name_with_owner}/labels", params: { q: "Bugs" }"
++"*
**!2°
∞
8@2Nassert_responseassert_response :ok"
--*
,,2÷
Â
8@2}assert_selectDassert_select "[data-test-selector='label-link']", text: label2.name"
..*
--2Ó
˚
8@2tnameDassert_select "[data-test-selector='label-link']", text: label2.name"
.E.I*
-D-H2Æ≤8@2áassert_selectNassert_select "[data-test-selector='label-link']", text: @label.name, count: 0"
//*
..2∑ƒ8@2~nameNassert_select "[data-test-selector='label-link']", text: @label.name, count: 0"
/E/I*
.D.H2˜˚8@2zassert_selectAassert_select ".issues-reset-query", text: "Clear current search""
00*
//2äó8@2`test0test "searches labels with colon-style emoji" do"
33*
222’Ÿ8@2xcreateFlabel2 = @repo.labels.create(name: ":rainbow: :ice_skate: onboarding")"
44!*
33 2†¶8@2xlabelsFlabel2 = @repo.labels.create(name: ":rainbow: :ice_skate: onboarding")"
44*
332ôü8@2Ymake_searchablemake_searchable @label, label2"
55*
442’‰8@27as	as @owner"
77*
662˘˚8@2qgetBget "/#{@repo.name_with_owner}/labels", params: { q: ":rainbow:" }"
88*
772áä8@2}name_with_ownerBget "/#{@repo.name_with_owner}/labels", params: { q: ":rainbow:" }"
88"*
77!2ï§8@2Nassert_responseassert_response :ok"
::*
992œﬁ8@2áassert_selectNassert_select "[data-test-selector='label-name']", text: @label.name, count: 0"
;;*
::2ÁÙ8@2~nameNassert_select "[data-test-selector='label-name']", text: @label.name, count: 0"
;E;I*
:D:H2ß´8@2zassert_selectAassert_select ".issues-reset-query", text: "Clear current search""
<<*
;;2∫«8@2Ñassert_selectKassert_select "[data-test-selector='label-link'] .g-emoji[alias='rainbow']""
==*
<<2Äç8@2Üassert_selectMassert_select "[data-test-selector='label-link'] .g-emoji[alias='ice_skate']""
>>*
==2–›8@2âtestYtest "shows 'Convert issues' button when discussions feature on and issues have label" do"
AA*
@@2ß´8@2denable2GitHub.flipper[:discussions_for_repo_users].enable"
B1B7*
A0A62±∑8@2eflipper2GitHub.flipper[:discussions_for_repo_users].enable"
BB*
AA2åì8@2dGitHub2GitHub.flipper[:discussions_for_repo_users].enable"
BB*
AA
2Öã8@2ecreate3create(:issue, repository: @repo, labels: [@label])"
CC*
BB
2º¬8@27as	as @owner"
EE*
DD2ı˜8@2Uget&get "/#{@repo.name_with_owner}/labels""
FF*
EE2ÉÜ8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
FF"*
EE!2ë†8@2Éassert_selectJassert_select "[data-test-selector='convert_issues_to_discussions_modal']""
HH*
GG2Øº8@2testOtest "does not show 'Convert issues' button when discussions feature is off" do"
KK*
JJ2Éá8@2fdisable3GitHub.flipper[:discussions_for_repo_users].disable"
L1L8*
K0K72Éä8@2fflipper3GitHub.flipper[:discussions_for_repo_users].disable"
LL*
KK2ﬁÂ8@2eGitHub3GitHub.flipper[:discussions_for_repo_users].disable"
LL*
KK
2◊›8@2ecreate3create(:issue, repository: @repo, labels: [@label])"
MM*
LL
2èï8@27as	as @owner"
OO*
NN2» 8@2Uget&get "/#{@repo.name_with_owner}/labels""
PP*
OO2÷Ÿ8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
PP"*
OO!2‰Û8@2çassert_selectTassert_select "[data-test-selector='convert_issues_to_discussions_modal']", count: 0"
RR*
QQ2Çè8@2ytestItest "does not show 'Convert issues' button when no issues have label" do"
UU*
TT2‡‰8@2denable2GitHub.flipper[:discussions_for_repo_users].enable"
V1V7*
U0U62⁄‡8@2eflipper2GitHub.flipper[:discussions_for_repo_users].enable"
VV*
UU2µº8@2dGitHub2GitHub.flipper[:discussions_for_repo_users].enable"
VV*
UU
2Æ¥8@27as	as @owner"
XX*
WW2ÊË8@2Uget&get "/#{@repo.name_with_owner}/labels""
YY*
XX2Ù˜8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
YY"*
XX!2Çë8@2çassert_selectTassert_select "[data-test-selector='convert_issues_to_discussions_modal']", count: 0"
[[*
ZZ2†≠8@2xtestHtest "does not show 'Convert issues' button when only PRs have label" do"
^^*
]]2˛Ç8@2denable2GitHub.flipper[:discussions_for_repo_users].enable"
_1_7*
^0^62˜˝8@2eflipper2GitHub.flipper[:discussions_for_repo_users].enable"
__*
^^2“Ÿ8@2dGitHub2GitHub.flipper[:discussions_for_repo_users].enable"
__*
^^
2À—8@2pcreate>pr_issue = create(:issue, repository: @repo, labels: [@label])"
``*
__2çì8@2ÅcreateOcreate(:pull_request, :disable_disk_access, repository: @repo, issue: pr_issue)"
aa*
``
2≈À8@27as	as @owner"
cc*
bb2öú8@2Uget&get "/#{@repo.name_with_owner}/labels""
dd*
cc2®´8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
dd"*
cc!2∂≈8@2çassert_selectTassert_select "[data-test-selector='convert_issues_to_discussions_modal']", count: 0"
ff*
ee2‘·8@2Jtesttest "paginates labels" do"
ii*
hh2≤∂8@2]create+label2 = @repo.labels.create(name: "zebra")"
jj!*
ii 2ÁÌ8@2]labels+label2 = @repo.labels.create(name: "zebra")"
jj*
ii2‡Ê8@2i
stub_const3LabelsController.stub_const(:LABELS_PER_PAGE, 1) do"
ll *
kk2ìù8@27as	as @owner"
mm	*
ll2ºæ8@2Uget&get "/#{@repo.name_with_owner}/labels""
nn
*
mm	2Ãœ8@2aname_with_owner&get "/#{@repo.name_with_owner}/labels""
nn$*
mm#2⁄È8@2Nassert_responseassert_response :ok"
pp*
oo2˙â8@2}assert_selectDassert_select "[data-test-selector='label-link']", text: @label.name"
qq*
pp2î°8@2tnameDassert_select "[data-test-selector='label-link']", text: @label.name"
qGqK*
pFpJ2‘ÿ8@2áassert_selectNassert_select "[data-test-selector='label-link']", text: label2.name, count: 0"
rr*
qq2ﬂÏ8@2~nameNassert_select "[data-test-selector='label-link']", text: label2.name, count: 0"
rGrK*
qFqJ2ü£8@27as	as @owner"
tt	*
ss2µ∑8@2jget;get "/#{@repo.name_with_owner}/labels", params: { page: 2 }"
uu
*
tt	2≈»8@2vname_with_owner;get "/#{@repo.name_with_owner}/labels", params: { page: 2 }"
uu$*
tt#2”‚8@2Nassert_responseassert_response :ok"
ww*
vv2à ó 8@2áassert_selectNassert_select "[data-test-selector='label-link']", text: @label.name, count: 0"
xx*
ww2¢ Ø 8@2~nameNassert_select "[data-test-selector='label-link']", text: @label.name, count: 0"
xGxK*
wFwJ2‚ Ê 8@2}assert_selectDassert_select "[data-test-selector='label-link']", text: label2.name"
yy*
xx2˜ Ñ!8@2tnameDassert_select "[data-test-selector='label-link']", text: label2.name"
yGyK*
xFxJ2∑!ª!8@2oLabelsController3LabelsController.stub_const(:LABELS_PER_PAGE, 1) do"
ll*
kk2Çí8@2Rtest"test "shows label descriptions" do"
}}*
||2Õ!—!8@2ccreate1label = @repo.labels.create(name: "sample label","
~~ *
}}2â"è"8@2clabels1label = @repo.labels.create(name: "sample label","
~~*
}}2Ç"à"8@2;as	as @owner"
ÅÅ*
ÄÄ2¸"˛"8@2Yget&get "/#{@repo.name_with_owner}/labels""
ÇÇ*
ÅÅ2ä#ç#8@2ename_with_owner&get "/#{@repo.name_with_owner}/labels""
ÇÇ"*
ÅÅ!2ò#ß#8@2Rassert_responseassert_response :ok"
ÑÑ*
ÉÉ2∂#≈#8@2âassert_selectLassert_select "[data-test-selector='label-detail']", text: label.description"
ÖÖ*
ÑÑ2Œ#€#8@2ádescriptionLassert_select "[data-test-selector='label-detail']", text: label.description"
ÖFÖQ*
ÑEÑP2è$ö$8@2Otesttest "renders the index" do"
àà*
áá2§$®$8@2;as	as @owner"
ââ*
àà2ƒ$∆$8@2Yget&get "/#{@repo.name_with_owner}/labels""
ää*
ââ2“$’$8@2ename_with_owner&get "/#{@repo.name_with_owner}/labels""
ää"*
ââ!2‡$Ô$8@2Wassert_responseassert_response :success"
åå*
ãã2˛$ç%8@2_assert_equal#assert_equal [@label], @repo.labels"
çç*
åå2õ%ß%8@2Ylabels#assert_equal [@label], @repo.labels"
ç"ç(*
å!å'2∏%æ%8@2otest;test "returns errors as JSON when label updated via XHR" do"
êê*
èè2»%Ã%8@2oname;label_data = { name: @label.name, description: GRIN_EMOJI }"
ë!ë%*
ê ê$2§&®&8@2u
GRIN_EMOJI;label_data = { name: @label.name, description: GRIN_EMOJI }"
ë4ë>*
ê3ê=2∑&¡&8@2;as	as @owner"
ìì*
íí2…&À&8@2êput]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
îî*
ìì2◊&⁄&8@2úname_with_owner]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
îî"*
ìì!2Â&Ù&8@2èid]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
î4î6*
ì3ì52Ü'à'8@2dassert_response%assert_response :unprocessable_entity"
ññ*
ïï2∫'…'8@2Uparse json = JSON.parse(response.body)"
òò*
óó2Ò'ˆ'8@2Tbody json = JSON.parse(response.body)"
ò ò$*
óó#2Ä(Ñ(8@2Xresponse json = JSON.parse(response.body)"
òò*
óó2˜'ˇ'8@2TJSON json = JSON.parse(response.body)"
òò*
óó2Ï''8@2ñassert_equalZassert_equal ["Description contains unicode characters above 0xffff"], json["description"]"
ôô*
òò2ä(ñ(8@2êassert_equalTassert_equal "Description contains unicode characters above 0xffff", json["message"]"
öö*
ôô2È(ı(8@2Utest!test "updates a label via XHR" do"
ùù*
úú2«)À)8@2;as	as @owner"
††*
üü2≈*«*8@2êput]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
°°*
††2”*÷*8@2úname_with_owner]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
°°"*
††!2·**8@2èid]put "/#{@repo.name_with_owner}/labels/#{@label.id}", params: { label: label_data }, xhr: true"
°4°6*
†3†52Ç+Ñ+8@2Rassert_responseassert_response :ok"
££*
¢¢2∂+≈+8@2nassert_equal2assert_equal label_data[:name], @label.reload.name"
§§*
££2Œ+⁄+8@2fname2assert_equal label_data[:name], @label.reload.name"
§3§7*
£2£62¸+Ä,8@2hreload2assert_equal label_data[:name], @label.reload.name"
§,§2*
£+£12ı+˚+8@2uassert_equal9assert_equal label_data[:description], @label.description"
••*
§§2Ö,ë,8@2tdescription9assert_equal label_data[:description], @label.description"
•3•>*
§2§=2≥,æ,8@2iassert_equal-assert_equal label_data[:color], @label.color"
¶¶*
••2√,œ,8@2bcolor-assert_equal label_data[:color], @label.color"
¶-¶2*
•,•12Î,,8@2otest;test "returns errors as JSON when label created via XHR" do"
©©*
®®2˙,˛,8@2Vname"label_data = { name: @label.name }"
™!™%*
© ©$2÷-⁄-8@2;as	as @owner"
¨¨*
´´2‚-‰-8@2ÖpostQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
≠≠	*
¨¨2-Ù-8@2êname_with_ownerQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
≠≠#*
¨¨"2ˇ-é.8@2dassert_response%assert_response :unprocessable_entity"
ØØ*
ÆÆ2«.÷.8@2Uparse json = JSON.parse(response.body)"
±±*
∞∞2˛.É/8@2Tbody json = JSON.parse(response.body)"
± ±$*
∞∞#2ç/ë/8@2Xresponse json = JSON.parse(response.body)"
±±*
∞∞2Ñ/å/8@2TJSON json = JSON.parse(response.body)"
±±*
∞∞2˘.˝.8@2vassert_equal:assert_equal ["Name has already been taken"], json["name"]"
≤≤*
±±2ó/£/8@2wassert_equal;assert_equal "Name has already been taken", json["message"]"
≥≥*
≤≤2÷/‚/8@2Utest!test "creates a label via XHR" do"
∂∂*
µµ2õ0ü08@2jassert_difference)assert_difference "@repo.labels.count" do"
ππ*
∏∏2ó1®18@2;as	as @owner"
∫∫	*
ππ2«1…18@2ÖpostQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
ªª*
∫∫
2◊1€18@2êname_with_ownerQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
ªª%*
∫∫$2Ê1ı18@2Rassert_responseassert_response :ok"
ΩΩ*
ºº2∞2ø28@2Mlastlabel = @repo.labels.last"
¿¿*
øø2Ê2Í28@2Olabelslabel = @repo.labels.last"
¿¿*
øø2ﬂ2Â28@2fassert_equal*assert_equal label_data[:name], label.name"
¡¡*
¿¿2Ô2˚28@2^name*assert_equal label_data[:name], label.name"
¡+¡/*
¿*¿.2ï3ô38@2tassert_equal8assert_equal label_data[:description], label.description"
¬¬*
¡¡2û3™38@2sdescription8assert_equal label_data[:description], label.description"
¬2¬=*
¡1¡<2À3÷38@2hassert_equal,assert_equal label_data[:color], label.color"
√√*
¬¬2€3Á38@2acolor,assert_equal label_data[:color], label.color"
√,√1*
¬+¬02Ç4á48@2Utest!test "sorts the index by name" do"
∆∆*
≈≈2ë4ï48@2Rcreaterepo   = create(:repository)"
««*
∆∆2¿4∆48@2acreate+label1 = repo.labels.create(name: "label1")"
…… *
»»2Ó4Ù48@2alabels+label1 = repo.labels.create(name: "label1")"
……*
»»2Á4Ì48@2acreate+label2 = repo.labels.create(name: "label2")"
   *
……2û5§58@2alabels+label2 = repo.labels.create(name: "label2")"
  *
……2ó5ù58@2acreate+label3 = repo.labels.create(name: "label3")"
ÀÀ *
  2Œ5‘58@2alabels+label3 = repo.labels.create(name: "label3")"
ÀÀ*
  2«5Õ58@2?asas repo.owner"
ÕÕ*
ÃÃ2Í5Ï58@2Bowneras repo.owner"
ÕÕ*
ÃÃ2Ú5˜58@2vgetCget "/#{repo.name_with_owner}/labels", params: { sort: "name-asc" }"
ŒŒ*
ÕÕ2¸5ˇ58@2Çname_with_ownerCget "/#{repo.name_with_owner}/labels", params: { sort: "name-asc" }"
ŒŒ!*
ÕÕ 2â6ò68@2Wassert_responseassert_response :success"
––*
œœ2≈6‘68@2sassert_equal7assert_equal [label1, label2, label3], assigns(:labels)"
——*
––2‚6Ó68@2nassigns7assert_equal [label1, label2, label3], assigns(:labels)"
—,—3*
–+–22â7ê78@2Vtest"test "sorts the index by count" do"
‘‘*
””2£7ß78@2Rcreaterepo   = create(:repository)"
’’*
‘‘2”7Ÿ78@2acreate+label1 = repo.labels.create(name: "label1")"
◊◊ *
÷÷2Å8á88@2alabels+label1 = repo.labels.create(name: "label1")"
◊◊*
÷÷2˙7Ä88@2]returns&label1.stubs(:issues_count).returns(1)"
ÿ!ÿ(*
◊ ◊'2∏8ø88@2[stubs&label1.stubs(:issues_count).returns(1)"
ÿÿ*
◊◊2£8®88@2acreate+label2 = repo.labels.create(name: "label2")"
ŸŸ *
ÿÿ2‹8‚88@2alabels+label2 = repo.labels.create(name: "label2")"
ŸŸ*
ÿÿ2’8€88@2acreate+label3 = repo.labels.create(name: "label3")"
⁄⁄ *
ŸŸ2å9í98@2alabels+label3 = repo.labels.create(name: "label3")"
⁄⁄*
ŸŸ2Ö9ã98@2]returns&label3.stubs(:issues_count).returns(3)"
€!€(*
⁄ ⁄'2√9 98@2[stubs&label3.stubs(:issues_count).returns(3)"
€€*
⁄⁄2Æ9≥98@2ÜreturnsORepository.any_instance.stubs(:sorted_labels).returns([label1, label2, label3])"
›3›:*
‹2‹92Å:à:8@2ÑstubsORepository.any_instance.stubs(:sorted_labels).returns([label1, label2, label3])"
››"*
‹‹!2Î998@2ãany_instanceORepository.any_instance.stubs(:sorted_labels).returns([label1, label2, label3])"
››*
‹‹2ﬁ9Í98@2â
RepositoryORepository.any_instance.stubs(:sorted_labels).returns([label1, label2, label3])"
››*
‹‹2”9›98@2?asas repo.owner"
ﬂﬂ*
ﬁﬁ2®:™:8@2Bowneras repo.owner"
ﬂﬂ*
ﬁﬁ2∞:µ:8@2xgetEget "/#{repo.name_with_owner}/labels", params: { sort: "count-desc" }"
‡‡*
ﬂﬂ2∫:Ω:8@2Ñname_with_ownerEget "/#{repo.name_with_owner}/labels", params: { sort: "count-desc" }"
‡‡!*
ﬂﬂ 2«:÷:8@2Wassert_responseassert_response :success"
‚‚*
··2Ö;î;8@2sassert_equal7assert_equal [label3, label1, label2], assigns(:labels)"
„„*
‚‚2¢;Æ;8@2nassigns7assert_equal [label3, label1, label2], assigns(:labels)"
„,„3*
‚+‚22…;–;8@2Vtest"test "can be added by a member" do"
ÊÊ*
ÂÂ2„;Á;8@2;as	as @owner"
ÁÁ*
ÊÊ2ä<å<8@2ÄpostLpost "/#{@repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
ËË	*
ÁÁ2ò<ú<8@2ãname_with_ownerLpost "/#{@repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
ËË#*
ÁÁ"2ß<∂<8@2{assert_redirected_to7assert_redirected_to "/#{@repo.name_with_owner}/labels""
ÍÍ*
ÈÈ2Í<˛<8@2vname_with_owner7assert_redirected_to "/#{@repo.name_with_owner}/labels""
Í$Í3*
È#È22â=ò=8@2gassert_equal+assert_equal "Bugs", @repo.labels.last.name"
ÎÎ*
ÍÍ2¶=≤=8@2_name+assert_equal "Bugs", @repo.labels.last.name"
Î,Î0*
Í+Í/2Õ=—=8@2_last+assert_equal "Bugs", @repo.labels.last.name"
Î'Î+*
Í&Í*2»=Ã=8@2alabels+assert_equal "Bugs", @repo.labels.last.name"
Î Î&*
ÍÍ%2¡=«=8@2_test+test "logs an event upon label creation" do"
ÓÓ*
ÌÌ2€=ﬂ=8@2;as	as @owner"
ÔÔ*
ÓÓ2ã>ç>8@2∞post|post "/#{@repo.name_with_owner}/labels", params: { label: { name: "fun stuff" }, context: "issue sidebar", issue_id: "123" }"
	*
ÔÔ2ô>ù>8@2ªname_with_owner|post "/#{@repo.name_with_owner}/labels", params: { label: { name: "fun stuff" }, context: "issue sidebar", issue_id: "123" }"
#*
ÔÔ"2®>∑>8@2{assert_redirected_to7assert_redirected_to "/#{@repo.name_with_owner}/labels""
ÚÚ*
ÒÒ2õ?Ø?8@2vname_with_owner7assert_redirected_to "/#{@repo.name_with_owner}/labels""
Ú$Ú3*
Ò#Ò22∫?…?8@2`first+label = @repo.labels.order("id DESC").first"
Ù+Ù0*
Û*Û/2˛?É@8@2`order+label = @repo.labels.order("id DESC").first"
ÙÙ*
ÛÛ2Ì?Ú?8@2alabels+label = @repo.labels.order("id DESC").first"
ÙÙ*
ÛÛ2Ê?Ï?8@2Jidrepository_id: @repo.id,"
ˆˆ*
ıı2ª@Ω@8@2Eiduser_id: @owner.id,"
˜˜*
ˆˆ2’@◊@8@2Fidactor_id: @owner.id,"
¯¯*
˜˜2@Ú@8@2Eidlabel_id: label.id,"
˘˘*
¯¯2äAåA8@2pdetect:analytics_event = GitHub.analytics_queue.detect do |event|"
Å.Å4*
Ä-Ä32ÊBÏB8@2yanalytics_queue:analytics_event = GitHub.analytics_queue.detect do |event|"
ÅÅ-*
ÄÄ,2÷BÂB8@2pGitHub:analytics_event = GitHub.analytics_queue.detect do |event|"
ÅÅ*
ÄÄ2œB’B8@2Massertassert analytics_event,"
ÖÖ*
ÑÑ
2ˆC¸C8@2åinspectU"no label.create event with expected dimensions in #{GitHub.analytics_queue.inspect}""
ÜSÜZ*
ÖRÖY2‡DÁD8@2îanalytics_queueU"no label.create event with expected dimensions in #{GitHub.analytics_queue.inspect}""
ÜCÜR*
ÖBÖQ2–DﬂD8@2ãGitHubU"no label.create event with expected dimensions in #{GitHub.analytics_queue.inspect}""
Ü<ÜB*
Ö;ÖA2…DœD8@2\test(test "can't be added by a non-member" do"
ââ*
àà2ÛD˜D8@2?asas @nonmember"
ää*
ââ2†E¢E8@2}postIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
ãã	*
ää2≤E∂E8@2àname_with_ownerIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
ãã#*
ää"2¡E–E8@2\assert_redirected_toassert_redirected_to "/""
çç*
åå2ÅFïF8@2lassert_equal0assert_equal @label.name, @repo.labels.last.name"
éé*
çç2ûF™F8@2dname0assert_equal @label.name, @repo.labels.last.name"
éé*
çç2≤F∂F8@2dname0assert_equal @label.name, @repo.labels.last.name"
é1é5*
ç0ç42 FŒF8@2dlast0assert_equal @label.name, @repo.labels.last.name"
é,é0*
ç+ç/2≈F…F8@2flabels0assert_equal @label.name, @repo.labels.last.name"
é%é+*
ç$ç*2æFƒF8@2^test*test "can't be deleted by a non-member" do"
ëë*
êê2ÿF‹F8@2?asas @nonmember"
íí*
ëë2áGâG8@2sdelete=delete "/#{@repo.name_with_owner}/issues/labels/#{@label.id}""
ìì*
íí
2ôGüG8@2|name_with_owner=delete "/#{@repo.name_with_owner}/issues/labels/#{@label.id}""
ìì%*
íí$2™GπG8@2oid=delete "/#{@repo.name_with_owner}/issues/labels/#{@label.id}""
ì>ì@*
í=í?2“G‘G8@2\assert_redirected_toassert_redirected_to "/""
ïï*
îî2‹GG8@2lassert_equal0assert_equal @label.name, @repo.labels.last.name"
ññ*
ïï2˘GÖH8@2dname0assert_equal @label.name, @repo.labels.last.name"
ññ*
ïï2çHëH8@2dname0assert_equal @label.name, @repo.labels.last.name"
ñ1ñ5*
ï0ï42•H©H8@2dlast0assert_equal @label.name, @repo.labels.last.name"
ñ,ñ0*
ï+ï/2†H§H8@2flabels0assert_equal @label.name, @repo.labels.last.name"
ñ%ñ+*
ï$ï*2ôHüH8@2Ttest test "404 for unknown labels" do"
ôô*
òò2≥H∑H8@2cget0get "/#{@repo.name_with_owner}/issues/labels/42""
öö*
ôô2ÿH€H8@2oname_with_owner0get "/#{@repo.name_with_owner}/issues/labels/42""
öö"*
ôô!2ÊHıH8@2Rassert_responseassert_response 404"
õõ*
öö2çIúI8@2tcontext=context "current_repository_locked_for_migration? is true" do"
ûû
*
ùù	2™I±I8@2dtest0test "POST :create returns status :forbidden" do"
üü	*
ûû2ÏII8@2Zlock_for_migration@repo.lock_for_migration"
††*
üü2©JªJ8@2;as	as @owner"
¢¢	*
°°2√J≈J8@2}postIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
££*
¢¢
2”J◊J8@2àname_with_ownerIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
££%*
¢¢$2‚JÒJ8@2Yassert_responseassert_response :forbidden"
••*
§§2§K≥K8@2itest5test "PUT (xhr) :update returns status :forbidden" do"
®®	*
ßß2ÃK–K8@2lcreate6label = create(:label, repository: @repo, name: "foo")"
©©*
®®2êLñL8@2Zlock_for_migration@repo.lock_for_migration"
´´*
™™2ÃLﬁL8@2;as	as @owner"
≠≠	*
¨¨2ÊLËL8@2îputaput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
ÆÆ
*
≠≠	2ˆL˘L8@2†name_with_owneraput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
ÆÆ$*
≠≠#2ÑMìM8@2ìidaput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
Æ5Æ7*
≠4≠62§M¶M8@2Yassert_responseassert_response :forbidden"
∞∞*
ØØ2ﬂMÓM8@2gtest3test "DELETE :destroy returns status :forbidden" do"
≥≥	*
≤≤2áNãN8@2lcreate6label = create(:label, repository: @repo, name: "foo")"
¥¥*
≥≥2…NœN8@2Zlock_for_migration@repo.lock_for_migration"
∂∂*
µµ2ÖOóO8@2;as	as @owner"
∏∏	*
∑∑2üO°O8@2kdelete5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
ππ*
∏∏2ØOµO8@2tname_with_owner5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
ππ'*
∏∏&2¿OœO8@2gid5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
π8π:*
∏7∏92‡O‚O8@2Yassert_responseassert_response :forbidden"
ªª*
∫∫2ÏO˚O8@2Ocontextcontext "GET preview" do"
øø
*
ææ	2òPüP8@2ätestVtest "loads successfully when valid parameters are given for user with repo access" do"
¿¿	*
øø2µPπP8@2;as	as @owner"
ƒƒ	*
√√2ÔQÒQ8@2ìget`get "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color }, xhr: true"
≈≈
*
ƒƒ	2ˇQÇR8@2üname_with_owner`get "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color }, xhr: true"
≈≈$*
ƒƒ#2çRúR8@2Rassert_responseassert_response :ok"
««*
∆∆2ÁRˆR8@2îassert_selectWassert_select "span[style='#{expected_style}'][title='some label']", text: "some label""
»»*
««2ÅSéS8@2ÜtestRtest "loads successfully when a different value is given for an existing label" do"
ÀÀ	*
  2ÊSÍS8@2;as	as @owner"
œœ	*
ŒŒ2úUûU8@2¬getéget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", params: { color: color, description: "", id: @label.id }, xhr: true"
––
*
œœ	2¨UØU8@2Œname_with_owneréget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", params: { color: color, description: "", id: @label.id }, xhr: true"
––$*
œœ#2∫U…U8@2œto_escaped_paraméget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", params: { color: color, description: "", id: @label.id }, xhr: true"
–>–N*
œ=œM2„UÛU8@2≈idéget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", params: { color: color, description: "", id: @label.id }, xhr: true"
–Ü–à*
œÖœá2´V≠V8@2Rassert_responseassert_response :ok"
““*
——2¬V—V8@2óassert_selectZassert_select "span[style='#{expected_style}'][title='#{@label.name}']", text: @label.name"
””*
““2‹VÈV8@2énameZassert_select "span[style='#{expected_style}'][title='#{@label.name}']", text: @label.name"
”F”J*
“E“I2õWüW8@2énameZassert_select "span[style='#{expected_style}'][title='#{@label.name}']", text: @label.name"
”]”a*
“\“`2≤W∂W8@2itest5test "loads successfully when invalid id is given" do"
÷÷	*
’’2ƒW»W8@2;as	as @owner"
⁄⁄	*
ŸŸ2›XﬂX8@2™getwget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color, id: Label.last.id + 1 }, xhr: true"
€€
*
⁄⁄	2ÌXX8@2∂name_with_ownerwget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color, id: Label.last.id + 1 }, xhr: true"
€€$*
⁄⁄#2˚XäY8@2©idwget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color, id: Label.last.id + 1 }, xhr: true"
€k€m*
⁄j⁄l2—Y”Y8@2´lastwget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color, id: Label.last.id + 1 }, xhr: true"
€f€j*
⁄e⁄i2ÃY–Y8@2¨Labelwget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: color, id: Label.last.id + 1 }, xhr: true"
€`€e*
⁄_⁄d2∆YÀY8@2Rassert_responseassert_response :ok"
››*
‹‹2ÏY˚Y8@2îassert_selectWassert_select "span[style='#{expected_style}'][title='some label']", text: "some label""
ﬁﬁ*
››2ÜZìZ8@2ztestFtest "does not load successfully when invalid parameters are given" do"
··	*
‡‡2ÎZÔZ8@2;as	as @owner"
‚‚	*
··2∏[∫[8@2îgetaget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: "fafa" }, xhr: true"
„„
*
‚‚	2»[À[8@2†name_with_owneraget "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: "fafa" }, xhr: true"
„„$*
‚‚#2÷[Â[8@2dassert_response%assert_response :unprocessable_entity"
ÂÂ*
‰‰2±\¿\8@2Uparse json = JSON.parse(response.body)"
ÁÁ*
ÊÊ2Í\Ô\8@2Tbody json = JSON.parse(response.body)"
Á"Á&*
Ê!Ê%2˘\˝\8@2Xresponse json = JSON.parse(response.body)"
ÁÁ!*
ÊÊ 2\¯\8@2TJSON json = JSON.parse(response.body)"
ÁÁ*
ÊÊ2Â\È\8@2lassert_equal0assert_equal ["Color is invalid"], json["color"]"
ËË*
ÁÁ2Ö]ë]8@2ctest/test "indicates a duplicate name is invalid" do"
ÎÎ	*
ÍÍ2√]«]8@2;as	as @owner"
ÏÏ	*
ÎÎ2˘]˚]8@2ágetTget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", xhr: true"
ÌÌ
*
ÏÏ	2â^å^8@2ìname_with_ownerTget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", xhr: true"
ÌÌ$*
ÏÏ#2ó^¶^8@2îto_escaped_paramTget "/#{@repo.name_with_owner}/labels/preview/#{@label.to_escaped_param}", xhr: true"
Ì>ÌN*
Ï=ÏM2¿^–^8@2dassert_response%assert_response :unprocessable_entity"
ÔÔ*
ÓÓ2Â^Ù^8@2Uparse json = JSON.parse(response.body)"
ÒÒ*
2û_£_8@2Tbody json = JSON.parse(response.body)"
Ò"Ò&*
!%2≠_±_8@2Xresponse json = JSON.parse(response.body)"
ÒÒ!*
 2§_¨_8@2TJSON json = JSON.parse(response.body)"
ÒÒ*
2ô_ù_8@2vassert_equal:assert_equal ["Name has already been taken"], json["name"]"
ÚÚ*
ÒÒ2π_≈_8@2btest.test "redirects when user is not signed in" do"
ıı	*
ÙÙ2Å`Ö`8@2Æget{get "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: "EFEFEF", description: "hey now" }, xhr: true"
ˆˆ
*
ıı	2∂`π`8@2∫name_with_owner{get "/#{@repo.name_with_owner}/labels/preview/some%20label", params: { color: "EFEFEF", description: "hey now" }, xhr: true"
ˆˆ$*
ıı#2ƒ`”`8@2Xassert_responseassert_response :redirect"
¯¯*
˜˜2πa»a8@2Éassert_matchGassert_match /http:\/\/github.com\/login/, response.headers["Location"]"
˘˘*
¯¯2ŸaÂa8@2~headersGassert_match /http:\/\/github.com\/login/, response.headers["Location"]"
˘;˘B*
¯:¯A2çbîb8@2responseGassert_match /http:\/\/github.com\/login/, response.headers["Location"]"
˘2˘:*
¯1¯92Ñbåb8@2bcontext+context "current_repository is archived" do"
˝˝
*
¸¸	2≤bπb8@2dtest0test "POST :create returns status :forbidden" do"
˛˛	*
˝˝2‚bÊb8@2Nset_archived@repo.set_archived"
ˇˇ*
˛˛2üc´c8@2;as	as @owner"
ÅÅ	*
ÄÄ2≥cµc8@2}postIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
ÇÇ*
ÅÅ
2√c«c8@2àname_with_ownerIpost "/#{@repo.name_with_owner}/issues/labels", params: { label: "Bugs" }"
ÇÇ%*
ÅÅ$2“c·c8@2Rassert_responseassert_response 302"
ÑÑ*
ÉÉ2îd£d8@2itest5test "PUT (xhr) :update returns status :forbidden" do"
áá	*
ÜÜ2µdπd8@2lcreate6label = create(:label, repository: @repo, name: "foo")"
àà*
áá2˘dˇd8@2Nset_archived@repo.set_archived"
ää*
ââ2µe¡e8@2;as	as @owner"
åå	*
ãã2…eÀe8@2îputaput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
çç
*
åå	2Ÿe‹e8@2†name_with_owneraput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
çç$*
åå#2Áeˆe8@2ìidaput "/#{@repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
ç5ç7*
å4å62áfâf8@2Rassert_responseassert_response 302"
èè*
éé2¬f—f8@2gtest3test "DELETE :destroy returns status :forbidden" do"
íí	*
ëë2„fÁf8@2lcreate6label = create(:label, repository: @repo, name: "foo")"
ìì*
íí2•g´g8@2Nset_archived@repo.set_archived"
ïï*
îî2·gÌg8@2;as	as @owner"
óó	*
ññ2ıg˜g8@2kdelete5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
òò*
óó2Öhãh8@2tname_with_owner5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
òò'*
óó&2ñh•h8@2gid5delete "/#{@repo.name_with_owner}/labels/#{label.id}""
ò8ò:*
ó7ó92∂h∏h8@2Rassert_responseassert_response 302"
öö*
ôô2¬h—h8@2Tenterprise?unless GitHub.enterprise?"
ûû*
ùù2ıhÄi8@2OGitHubunless GitHub.enterprise?"
û
û*
ù	ù2ÓhÙh8@2Ycontext"context "Hydro Instrumentation" do"
üü*
ûû2Öiåi8@2Oincludeinclude HydroTestHelpers"
††*
üü2Æiµi8@2XHydroTestHelpersinclude HydroTestHelpers"
††*
üü2∂i∆i8@2ftest2test "label create event is published to hydro" do"
¢¢*
°°
2Œi“i8@2jassert_difference)assert_difference "@repo.labels.count" do"
•	•*
§§2„jÙj8@2;as	as @owner"
¶¶*
•
•2ókôk8@2ÖpostQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
ßß*
¶
¶2´kØk8@2êname_with_ownerQpost "/#{@repo.name_with_owner}/labels", params: { label: label_data }, xhr: true"
ßß)*
¶¶(2∫k…k8@2Rassert_responseassert_response :ok"
©©*
®
®2àlól8@2Mlastlabel = @repo.labels.last"
¨¨"*
´´!2∆l l8@2Olabelslabel = @repo.labels.last"
¨¨*
´´2øl≈l8@2alabel,label: Hydro::EntitySerializer.label(label),"
Ø*Ø/*
Æ)Æ.2âmém8@2lEntitySerializer,label: Hydro::EntitySerializer.label(label),"
ØØ)*
ÆÆ(2Òlàm8@2aHydro,label: Hydro::EntitySerializer.label(label),"
ØØ*
ÆÆ2Òlˆl8@2`user,actor: Hydro::EntitySerializer.user(@owner),"
∞*∞.*
Ø)Ø-2¿mƒm8@2lEntitySerializer,actor: Hydro::EntitySerializer.user(@owner),"
∞∞)*
ØØ(2®møm8@2aHydro,actor: Hydro::EntitySerializer.user(@owner),"
∞∞*
ØØ2®m≠m8@2Üassert_hydro_published@assert_hydro_published(message, schema: "github.v1.LabelCreate")"
≥	≥*
≤≤2·m˜m8@2ñ.external_identity_session_enforcement_enabled?8if GitHub.external_identity_session_enforcement_enabled?"
ππ9*
∏
∏82…n˜n8@2nGitHub8if GitHub.external_identity_session_enforcement_enabled?"
ππ
*
∏∏	2¬n»n8@2äLabelControllerSamlHttpTest?class LabelControllerSamlHttpTest < GitHub::IntegrationTestCase"
∫	∫$*
ππ#2Äoõo8@2ÇIntegrationTestCase?class LabelControllerSamlHttpTest < GitHub::IntegrationTestCase"
∫'∫B*
π&πA2ûoπo8@2uGitHub?class LabelControllerSamlHttpTest < GitHub::IntegrationTestCase"
∫'∫-*
π&π,2ûo§o8@2Zinclude#include AuthenticationHelpers::SAML"
ªª*
∫∫2æo≈o8@2WSAML#include AuthenticationHelpers::SAML"
ªª(*
∫∫'2∆o·o8@2hAuthenticationHelpers#include AuthenticationHelpers::SAML"
ªª"*
∫∫!2∆o€o8@2Cfixturesfixtures do"
ºº*
ªª2ÊoÓo8@2dcreate.@external_identity = create :external_identity"
ΩΩ"*
ºº!2çpìp8@2Xuser$@saml_user = @external_identity.user"
æ'æ+*
Ω&Ω*2Õp—p8@2\target&@saml_org  = @external_identity.target"
ø'ø-*
æ&æ,2¯p˛p8@2kcreate5@public_repo  = create(:repository, owner: @saml_org)"
¿¿*
øø2ïqõq8@2rcreate<@private_repo = create :private_repository, owner: @saml_org"
¡¡*
¿¿2—q◊q8@2mcreate7@label4 = @public_repo.labels.create(name: "Features4")"
¬%¬+*
¡$¡*2¢r®r8@2mlabels7@label4 = @public_repo.labels.create(name: "Features4")"
¬¬$*
¡¡#2õr°r8@2mcreate7@label2 = @public_repo.labels.create(name: "Features1")"
√%√+*
¬$¬*2‡rÊr8@2mlabels7@label2 = @public_repo.labels.create(name: "Features1")"
√√$*
¬¬#2Ÿrﬂr8@2ncreate8@label1 = @private_repo.labels.create(name: "Features2")"
ƒ&ƒ,*
√%√+2üs•s8@2nlabels8@label1 = @private_repo.labels.create(name: "Features2")"
ƒƒ%*
√√$2òsûs8@2Wcontext context "private repo labels" do"
««*
∆∆2∆sÕs8@2ÄtestLtest "labels added by a member requires active external identity session" do"
»»*
««
2ÌsÒs8@2?asas @saml_user"
…	…*
»»
2¬tƒt8@2àpostTpost "/#{@private_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
 	 *
……2ÿt‹t8@2ìname_with_ownerTpost "/#{@private_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
   /*
…….2Ôt˛t8@2`assert_saml_sso_requiredassert_saml_sso_required"
À	À!*
   2µuÕu8@2wtestCtest "deleting labels requires active external identity session" do"
ŒŒ*
ÕÕ
2ﬂu„u8@2?asas @saml_user"
œ	œ*
ŒŒ
2´v≠v8@2|deleteFdelete "/#{@private_repo.name_with_owner}/issues/labels/#{@label1.id}""
–	–*
œœ2¡v«v8@2Öname_with_ownerFdelete "/#{@private_repo.name_with_owner}/issues/labels/#{@label1.id}""
–"–1*
œ!œ02⁄vÈv8@2xidFdelete "/#{@private_repo.name_with_owner}/issues/labels/#{@label1.id}""
–K–M*
œJœL2ÉwÖw8@2`assert_saml_sso_requiredassert_saml_sso_required"
—	—!*
–– 2êw®w8@2~testJtest "labels added by a member with external identity session give 302" do"
‘‘
*
””	2πwΩw8@2has6as @saml_user, external_identities: @external_identity"
’’
*
‘‘	2ãxçx8@2àpostTpost "/#{@private_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
÷÷*
’’2…xÕx8@2ìname_with_ownerTpost "/#{@private_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
÷÷.*
’’-2‡xÔx8@2Rassert_responseassert_response 302"
◊◊*
÷÷2•y¥y8@2Vcontextcontext "public repo labels" do"
€€*
⁄⁄2œy÷y8@2ÄtestLtest "labels added by a member requires active external identity session" do"
‹‹*
€€
2ıy˘y8@2?asas @saml_user"
›	›*
‹‹
2 zÃz8@2ápostSpost "/#{@public_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
ﬁ	ﬁ*
››2‡z‰z8@2íname_with_ownerSpost "/#{@public_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
ﬁﬁ.*
››-2ˆzÖ{8@2`assert_saml_sso_requiredassert_saml_sso_required"
ﬂ	ﬂ!*
ﬁﬁ 2º{‘{8@2wtestCtest "deleting labels requires active external identity session" do"
‚‚*
··
2Ê{Í{8@2?asas @saml_user"
„	„*
‚‚
2≤|¥|8@2{deleteEdelete "/#{@public_repo.name_with_owner}/issues/labels/#{@label2.id}""
‰	‰*
„„2»|Œ|8@2Ñname_with_ownerEdelete "/#{@public_repo.name_with_owner}/issues/labels/#{@label2.id}""
‰!‰0*
„ „/2‡|Ô|8@2widEdelete "/#{@public_repo.name_with_owner}/issues/labels/#{@label2.id}""
‰J‰L*
„I„K2â}ã}8@2`assert_saml_sso_requiredassert_saml_sso_required"
Â	Â!*
‰‰ 2ñ}Æ}8@2~testJtest "labels added by a member with external identity session give 302" do"
ËË*
ÁÁ
2¿}ƒ}8@2has6as @saml_user, external_identities: @external_identity"
È	È*
ËË
2ì~ï~8@2ápostSpost "/#{@public_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
Í	Í*
ÈÈ2“~÷~8@2íname_with_ownerSpost "/#{@public_repo.name_with_owner}/labels", params: { label: { name: "Bugs" } }"
ÍÍ.*
ÈÈ-2Ë~˜~8@2Rassert_responseassert_response 302"
Î	Î*
ÍÍ2ÆΩ8@2wtestCtest "updating labels requires active external identity session" do"
ÓÓ*
ÌÌ
2”◊8@2ucreate=label = create(:label, repository: @public_repo, name: "foo")"
ÔÔ*
ÓÓ2ßÄ≠Ä8@2Aasas @saml_user"
	*
ÔÔ
2ÂÄÁÄ8@2ùputhput "/#{@public_repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
Ò	Ò*
2˚Ä˛Ä8@2©name_with_ownerhput "/#{@public_repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
ÒÒ-*
,2êÅüÅ8@2úidhput "/#{@public_repo.name_with_owner}/labels/#{label.id}", params: { label: { name: "bar" } }, xhr: true"
Ò>Ò@*
=?2∞Å≤Å8@2^assert_responseassert_response :unauthorized"
Ú	Ú*
ÒÒ2ÏÅ˚Å8@2{testEtest "renders the index requires active external identity session" do"
ıı*
ÙÙ
2õÇüÇ8@2Aasas @saml_user"
ˆ	ˆ*
ıı
2ÈÇÎÇ8@2bget-get "/#{@public_repo.name_with_owner}/labels""
˜	˜*
ˆˆ2ˇÇÇÉ8@2nname_with_owner-get "/#{@public_repo.name_with_owner}/labels""
˜˜-*
ˆˆ,2îÉ£É8@2bassert_saml_sso_requiredassert_saml_sso_required"
¯	¯!*
˜˜ 2µÉÕÉ8@2Xtest"test "sorts the index by count" do"
˚˚*
˙˙
2ﬂÉ„É8@2`returns'@label2.stubs(:issues_count).returns(1)"
¸&¸-*
˚%˚,2ßÑÆÑ8@2^stubs'@label2.stubs(:issues_count).returns(1)"
¸¸*
˚˚2íÑóÑ8@2`returns'@label4.stubs(:issues_count).returns(3)"
˝&˝-*
¸%¸,2◊ÑﬁÑ8@2^stubs'@label4.stubs(:issues_count).returns(3)"
˝˝*
¸¸2¬Ñ«Ñ8@2ãreturnsRRepository.any_instance.stubs(:sorted_labels).returns([@label2, @label3, @label4])"
˛7˛>*
˝6˝=2òÖüÖ8@2âstubsRRepository.any_instance.stubs(:sorted_labels).returns([@label2, @label3, @label4])"
˛!˛&*
˝ ˝%2ÇÖáÖ8@2êany_instanceRRepository.any_instance.stubs(:sorted_labels).returns([@label2, @label3, @label4])"
˛˛ *
˝˝2ıÑÅÖ8@2é
RepositoryRRepository.any_instance.stubs(:sorted_labels).returns([@label2, @label3, @label4])"
˛	˛*
˝˝2ÍÑÙÑ8@2Aasas @saml_user"
ˇ	ˇ*
˛˛
2≈Ö«Ö8@2ÇgetMget "/#{@public_repo.name_with_owner}/labels", params: { sort: "count-desc" }"
Ä	Ä*
ˇˇ2€ÖﬁÖ8@2éname_with_ownerMget "/#{@public_repo.name_with_owner}/labels", params: { sort: "count-desc" }"
ÄÄ-*
ˇˇ,2ÖˇÖ8@2bassert_saml_sso_requiredassert_saml_sso_required"
Å	Å!*
ÄÄ 2±Ü…Ü8@